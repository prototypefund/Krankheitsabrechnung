$Source: /home/ncq/Projekte/cvs2git/vcs-mirror/gnumed/gnumed/client/doc/TODO/developer-guide.txt,v $
$Revision: 1.28 $
--------------------------------------------------------------
Rules:
------
- add material for the Developer's Guide here if you don't want
  to put it into the sgml code yourself
- leave behind an email address
- Please date it. Thanks
- delete things if you incorporated them into the guide
--------------------------------------------------------------
Die 09 Mär 2004 10:49:17 CET
----------------------------
GNUmed forms concept
====================
Overview
--------
Forms consist of two parts: the template and the data. The
template is stored in the table paperwork_templates along
with some metadata about the form. The template contains
placeholders which will be replaced by data. Placeholders
may appear more than once per template and their exact
format is template format specific. GNUmed proper is
agnostic of the placeholder format. The templates are stored
in the service "reference". They can be refreshed from files
any time.

Some part of GNUmed, usually a widget, will collect the data
needed to fill in a form. Data may come directly from the database,
from user input or be the result of some function.

Every form has a rendering engine type associated with it. The
template and data are passed to the rendering engine which
knows how to replace placeholders specific to the template format.
Engines include LaTeX, pdflib and others. The engine eventually
renders the substituted template into a format directly suitable
for passing on to the intended pathway of delivery. In most cases
this will be a printer and thus the rendering engine will produce
a PDF or PS file. However, some forms may be transmitted by email
so the rendering output may be an SMTP compatible text file. Finally,
form instances are recorded in form_instances and the data is
stored in form_data with a link to the particular instance. Both
tables are to be found in the "clinical" service. The rendered form
is stored in the forms delivery queue form_queue in the service
"administrivia", again with a link to the form_instance row.

(Perhaps several) demons listen to incoming requests in form_queue
and handle rendered forms. In most cases a form will be sent to a
printer after appropriate user interaction. New form jobs are of
the status "submitted". Those that are currently being processed
are marked "in progress". When done or when a form job is cancelled
it is marked "removable". In some cases it may be useful to mark
a job "halted". Eventually, after a predefined interval form jobs
are removed from the form_queue. They stay archived in
form_instance/form_data in the clinical service, however.

Placeholders
------------
The goal is to make most any data available via some placeholder.

Placeholders have the same label across template formats but their
delimiters may need to vary depending on the magic characters native
to the template format. The general definition is: <delim><name><delim>

Several functional types of placeholders are imaginable ("$"s are
used as delimiters in the examples):

symbolic: $symb:PATIENT_LAST_NAME$
SQL: $SQL:identity.PUPIC$
pure Python: $eval:my_fancy_method('a', 3)$
Gnumedlets: $gmlet:my_gnumedlet.py$

Whether it is wise to implement them all is, of course, debatable.

Design concepts
---------------

1) There's an immeasurable flood of forms. Hence it is
   essential to allow for relatively easy addition of forms by
   sophisticated users and easy download/integration of added
   forms by "normal" users.

2) Forms most of the time duplicate information. It must be
   easy to reuse existing data.

3) Some forms need rapid printing (prescriptions, referrals,
   etc) while others can be printed at slower speeds. Thus
   text mode and graphics mode for printing appear necessary.

4) Once printed a form should be stored forever. It must be
   possible to redisplay the form at any time in the future.
   It is very desirable to reuse the form for filling in new
   form instances or reprinting the old one. This also means
   form definitions should never ever disappear from a GNUmed
   system. They should only become obsolete/invisible but
   should never be deleted.

5) There are several different possible targets for the
   content of a form: fax, email, paper, smartcard, ...  Thus
   it seems advantageous to have an intermediate format.
   Whether that is XML or database tables matters little, I
   guess.

I can discuss a million little details but those are better left
for discussion during implementation. Primarily we should
probably focus on getting on paper: a) a prescription, b) a
referral form, c) a work certificate (for when you are sick
and shouldn't go to work).

It is extremely helpful to get friendly with an interested
local doctor to go back and ask for clarification on domain
specific things but this is not an _absolute_ necessity.

In case you happen to understand German there's a rather
comprehensive requirements document at

http://resmedicinae.sourceforge.net/model/analysis/analysis_de.txt
