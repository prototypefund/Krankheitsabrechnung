# -*- coding: utf-8 -*-
#------------------------------------------------------------
# This file was generated by encode_bitmaps_gnumedGP.py
#------------------------------------------------------------
import wx

import cPickle, zlib
#----------------------------------------------------------------------
def getAddData():
    return cPickle.loads(zlib.decompress(
'x\xda\xd3\xc8)0\xe4\nV72U02S0Q0T\xe7J\x0cV\xcfWHVp\xcaIL\xce\x06\xf3\xf4\
\x80<e\x03 \xb00\x00\xf3\x15@|g\x03\x10\x04\xf3#@|7\x0b7g7\x0b\xa8<\x0e\x00\
\x93\xd5\xc3\x00$\xc8FD\xe8\x811\x9cA\x92^T\x80.\x9b\x9f\x9f\x0f\xc2`\x02S\
\x96&z\xf3\xf3\xf1\xcaF\xe0\xf3Q>\xba\xce|\xe4p\xceGw\x13\xba,5\xf5\xe6\xe7#\
\xf9\x08\x1d \xcbb\x01xda&\x90#\x8b\xdfd\neQ\xd23NY=\x00\x84\\\xc2\x0c' ))

def getAddBitmap():
    return wx.BitmapFromXPMData(getAddData())

def getAddImage():
    return wx.ImageFromBitmap(getAddBitmap())

#----------------------------------------------------------------------
def getAllergiesData():
    return cPickle.loads(zlib.decompress(
'x\xda\xd3\xc8)0\xe4\nV74S\x00"\x13\x05Cu\xae\xc4`u=\x85d\x05\xa7\x9c\xc4\
\xe4l0/\x1f\xc8S6\xb70\x00\x020?\x02\xc4wC\xf0\x15@|\'\x0b\'g\'\x0b(\x1f\x15\
 \t\xea\x81\x00\x86`DDD\xbe\x1e\xf5\x04\xf5\xf2\x81 \x02$\x9a\x0f\x14\x87\tF\
 @\xbe\x1e\xe9\x82 \x00\x16\x00\x01\x1a:\x1e\x1eJ0A=\x00\xc7\nY\x1d' ))

def getAllergiesBitmap():
    return wx.BitmapFromXPMData(getAllergiesData())

def getAllergiesImage():
    return wx.ImageFromBitmap(getAllergiesBitmap())

#----------------------------------------------------------------------
def getBlood_TubeData():
    return cPickle.loads(zlib.decompress(
'x\xda\x95\xcf=\x0b\x03!\x0c\x06\xe0\xfd~E \x83\x85\x83\x10\x97\x9aQ\xee\xc0\
\xf5\x86[\\K\xd7\x82\xfd\xffS\xebG\x8aZ(T\\\xde\'Q\xe3\xe5\xf1\xb4\xcbi\xec\
\x15\xde[\xc0\x9a\xe5v\x9a\x15\xee\x80N\xdc\xce\\2\xe5\x1c\x849H\xc9Q\xeb\
\xaef\xac\x99\xb9\xf5\x1f\xb5?\xe8\xf9\xa4\xb9\x9d\xf7z_\xabC\xce\x9bl\xfb&-\
\x8fkF\xa2o$\xca:b,<b\x84\x94`\xea\xcc\x16\xa7\x87"\x1c\xd5:\xcc\xb6N#E\xef=\
Ns\xf6\xa68\x98"\xf6\xf6A\xc4\x1f\x7f\xff\x1f\xe9\x05;\xb7V\x99' ))

def getBlood_TubeBitmap():
    return wx.BitmapFromXPMData(getBlood_TubeData())

def getBlood_TubeImage():
    return wx.ImageFromBitmap(getBlood_TubeBitmap())

#----------------------------------------------------------------------
def getCalculatorData():
    return cPickle.loads(zlib.decompress(
'x\xda\xd3\xc8)0\xe4\nV74S\x00" \xa1\xce\x95\x18\xac\xae\xa7\x90\xac\xe0\x94\
\x93\x98\x9c\r\xe6i\x03y\xca\xe6\x16\xe6\xce\xe6\x16`\xbe?\x88\xeff\xe1\xe6\
\xec\x06\xe1\xe7\x83\xf8\x06\x06p~\x04\x84\x0fW\xaf\x00\xe2;Y89;A\xf9z\x110\
\xa0\xa7\xa7\xa0\xa0\x00\x15\xccG\x88"\t\xea\xf9\x83\x01\x11\x82\xd8\xb5G@\
\xe0@\xaa\xd4\xc6\xa6\x12MPO[\x1b\xd3L\x18@\x0e%$\x00\x11\xd4\x03\x00\x7f\
\x83jd' ))

def getCalculatorBitmap():
    return wx.BitmapFromXPMData(getCalculatorData())

def getCalculatorImage():
    return wx.ImageFromBitmap(getCalculatorBitmap())

#----------------------------------------------------------------------
def getFamily_HistoryData():
    return cPickle.loads(zlib.decompress(
"x\xda\x9d\x90\xb1\n\xc3 \x10\x86\xf7>\xc5\x81\x81\x14\x041Kc\xb7\xc3\x80\
\xeb\rY\\C\xc6\x06\xae\xef?\xf5N\x8d\xd0f\xabg\x02\xdf\xe7\x7f'x?\xde\xd3m\
\x1d\xa7\x07\xc8~\xc24\xde\xb6u$\xd8!\x1e\xdb\xfe*4\x08\x999\xcc\x8b\xf7\x85\
Y9\x05\xefS(l\x95\xbd\xef\xecj^M\xe1\\\xf3\xe9\xec\xc7\x9aOK\xcb\x9bs^;\x07\
\xe5\x18\xe2\x12C\xe3\xef\xd5\xa4s\xae`\xce\xb9K\xc7R\xea\x989\xf7\xa4\x00\\\
$p\x1bG}\xa6\xb5\x16\xf4CDf\xc4.Q4 \x10\x12\x9c\x12\x88\xa8Hmo\x92\x8bd)c\
\x8c\xfc\xdbETo0\xba\xe0G\x96\x8e\x8b\x1c\xa4\xba\xac\xf0\xb7\xbc<\x9d\xfb\
\x006\xb1`\xc1" ))

def getFamily_HistoryBitmap():
    return wx.BitmapFromXPMData(getFamily_HistoryData())

def getFamily_HistoryImage():
    return wx.ImageFromBitmap(getFamily_HistoryBitmap())

#----------------------------------------------------------------------
def getImmunisationsData():
    return cPickle.loads(zlib.decompress(
'x\xdam\xd0\xb1\n\x80 \x10\x06\xe0\xbd\xa7\xf8\xa1\xc1\xa6\x9f$\x08g\x83^\
\xa0\xc55\x1ak\xe8\xfd\xa7N3\xf409\x90\xff\xe3\x0eN\x87\xeb\xb6\xddf\xec\x0c\
\xa9\t\xd6t\xfbf\x88\x03\xfe\xda\x8f3\xa5 \xa9_\xdd\xba\x8cc\xca\x88\xd9;\
\xbfx\x97s9$\xd0`\xd4\xb6ST\xa141\xde5\x92LV#C\xc8ZP,\xaa\xc2dA\x8f\xd7\xa61\
\x9b\xc2\xcf\n~\xebTH\xf5\xd2\x17\xb5!\xff\xe9\x0f\xa2E>9IF\x82' ))

def getImmunisationsBitmap():
    return wx.BitmapFromXPMData(getImmunisationsData())

def getImmunisationsImage():
    return wx.ImageFromBitmap(getImmunisationsBitmap())

#----------------------------------------------------------------------
def getMeasurementsData():
    return cPickle.loads(zlib.decompress(
'x\xda]\x90\xbd\n\x840\x0c\x80w\x9f"\x10\x8b\x07B\xa8\xcb\xe9\x18\x14\\3\xb8\
t\x15\xc7\x13\xbc\xf7\x9f.\xb1?\xea\xc5"|_\xd2\xc4\xf8\xda\xbf]\xb54\xdd\x1b\
\xecx\xe8\x9aj]\x1a\x82\r\xc6}\xdd>\'\x05%\xec\x87~\xf2\xfed\xc9\xdc\x0f\'\
\xb7\x91\xbdO\xf9\xc3x\x1e\xe6\\_\x1b{_\x98#\x97~.\xe7\xe7\xd8\x0fs>\xf5\x07\
\xe3q\x18\xa711=\x02\xa2\x0c\xc7-B\x91AO~%)\x8fH\x92Z\x81[$\x19D\x98\xd92\
\x88eP\x10\xae\x99k\x01rw)\xc4$\x82N\x9fK\x820\xe9]\x95t\x975\x91s(\xff\x95\
\x0e\x11\x04\x1f\x95l\xed\xe0Yiw\xc1\xe4\xb5\xbb\xcde[\x87J\xa5~\xbc\x0e\x8e\
QzJ\xd0\xbf\xa7\xbb\xc4c\x92~E\xd5oJ' ))

def getMeasurementsBitmap():
    return wx.BitmapFromXPMData(getMeasurementsData())

def getMeasurementsImage():
    return wx.ImageFromBitmap(getMeasurementsBitmap())

#----------------------------------------------------------------------
def getPast_HistoryData():
    return cPickle.loads(zlib.decompress(
"x\xdaUN\xb1\n\x850\x0c\xdc\xfd\x8a\x82\x83\x0f\n\xe5\xb9<;\x86\n\xae\x19\\n\
\x15\xc7'\xf4\xfd\xff\xf4\x926jMJ\xe9\xdd\xe5r}\x1d\xbf\xb1[\x87\xf1\xe3\xe4\
D7\x0e\xdd\xb6\x0ep\xbbK\xc7\xb6\x7f\x0b\xf2\x82\xfa\xb7\xd4\x14\x0b&\xc5S\
\x9cf\xc3\xfd\xa9/\x15\xbb\xaa+S0+^\xe22\x9b\x1e*\xbe\xf4\xac8\xc54'\xf3\x87\
\xe0\x1c\xa4r\xad:\x94\x01fF\x96FCf0\xe0\xd9\xabp\x91\x04/\xf6\x9e\xe5q\x93^\
&3\xdb\xde\xc6\xce$\xadZc\x07\x88\xf0$\xcbJ<\xece\x88d\x01\x9a \xc9\xb0\xafB\
\x1e7IJ\xeaEh\xec\xb0\xeb\xb4\xd7\x04Yji6\xd9\xd6\x15\xf4\xe0\xcc\xee\xdb.d\
\xf8\x03\x05\x94\x87\xcb" ))

def getPast_HistoryBitmap():
    return wx.BitmapFromXPMData(getPast_HistoryData())

def getPast_HistoryImage():
    return wx.ImageFromBitmap(getPast_HistoryBitmap())

