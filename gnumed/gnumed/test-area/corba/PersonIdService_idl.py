# Python stubs generated by omniidl from PersonIdService.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(2,0, __file__)

# #include "corbamed/idl/AbbreviatedIncludes/NamingAuthority.idl"
import NamingAuthority_idl
_0_NamingAuthority = omniORB.openModule("NamingAuthority")
_0_NamingAuthority__POA = omniORB.openModule("NamingAuthority__POA")
# #include "corbamed/idl/AbbreviatedIncludes/CosNaming.idl"
import CosNaming_idl
_0_CosNaming = omniORB.openModule("CosNaming")
_0_CosNaming__POA = omniORB.openModule("CosNaming__POA")
# #include "corbamed/idl/AbbreviatedIncludes/CosTrading.idl"
import CosTrading_idl
_0_CosTrading = omniORB.openModule("CosTrading")
_0_CosTrading__POA = omniORB.openModule("CosTrading__POA")
# #include "corbamed/idl/AbbreviatedIncludes/CosPropertyService.idl"
import CosPropertyService_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")

#
# Start of module "PersonIdService"
#
__name__ = "PersonIdService"
_0_PersonIdService = omniORB.openModule("PersonIdService", r"PersonIdService.idl")
_0_PersonIdService__POA = omniORB.openModule("PersonIdService__POA", r"PersonIdService.idl")


# interface Identity;
_0_PersonIdService._d_Identity = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/Identity:1.0", "Identity")
omniORB.typeMapping["IDL:omg.org/PersonIdService/Identity:1.0"] = _0_PersonIdService._d_Identity

# interface IdentifyPerson;
_0_PersonIdService._d_IdentifyPerson = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/IdentifyPerson:1.0", "IdentifyPerson")
omniORB.typeMapping["IDL:omg.org/PersonIdService/IdentifyPerson:1.0"] = _0_PersonIdService._d_IdentifyPerson

# interface ProfileAccess;
_0_PersonIdService._d_ProfileAccess = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/ProfileAccess:1.0", "ProfileAccess")
omniORB.typeMapping["IDL:omg.org/PersonIdService/ProfileAccess:1.0"] = _0_PersonIdService._d_ProfileAccess

# interface SequentialAccess;
_0_PersonIdService._d_SequentialAccess = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/SequentialAccess:1.0", "SequentialAccess")
omniORB.typeMapping["IDL:omg.org/PersonIdService/SequentialAccess:1.0"] = _0_PersonIdService._d_SequentialAccess

# interface IdentityAccess;
_0_PersonIdService._d_IdentityAccess = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/IdentityAccess:1.0", "IdentityAccess")
omniORB.typeMapping["IDL:omg.org/PersonIdService/IdentityAccess:1.0"] = _0_PersonIdService._d_IdentityAccess

# interface IdMgr;
_0_PersonIdService._d_IdMgr = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/IdMgr:1.0", "IdMgr")
omniORB.typeMapping["IDL:omg.org/PersonIdService/IdMgr:1.0"] = _0_PersonIdService._d_IdMgr

# interface CorrelationMgr;
_0_PersonIdService._d_CorrelationMgr = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/CorrelationMgr:1.0", "CorrelationMgr")
omniORB.typeMapping["IDL:omg.org/PersonIdService/CorrelationMgr:1.0"] = _0_PersonIdService._d_CorrelationMgr

# typedef ... DomainName
class DomainName (_0_NamingAuthority.AuthorityId):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/DomainName:1.0"

_0_PersonIdService.DomainName = DomainName
_0_PersonIdService._d_DomainName  = omniORB.typeMapping["IDL:omg.org/NamingAuthority/AuthorityId:1.0"]
_0_PersonIdService._ad_DomainName = (omniORB.tcInternal.tv_alias, DomainName._NP_RepositoryId, "DomainName", omniORB.typeMapping["IDL:omg.org/NamingAuthority/AuthorityId:1.0"])
_0_PersonIdService._tc_DomainName = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_DomainName)
omniORB.registerType(DomainName._NP_RepositoryId, _0_PersonIdService._ad_DomainName, _0_PersonIdService._tc_DomainName)
del DomainName

# typedef ... DomainNameSeq
class DomainNameSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/DomainNameSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.DomainNameSeq = DomainNameSeq
_0_PersonIdService._d_DomainNameSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/DomainName:1.0"], 0)
_0_PersonIdService._ad_DomainNameSeq = (omniORB.tcInternal.tv_alias, DomainNameSeq._NP_RepositoryId, "DomainNameSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/DomainName:1.0"], 0))
_0_PersonIdService._tc_DomainNameSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_DomainNameSeq)
omniORB.registerType(DomainNameSeq._NP_RepositoryId, _0_PersonIdService._ad_DomainNameSeq, _0_PersonIdService._tc_DomainNameSeq)
del DomainNameSeq

# typedef ... PersonId
class PersonId:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/PersonId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.PersonId = PersonId
_0_PersonIdService._d_PersonId  = omniORB.typeMapping["IDL:omg.org/NamingAuthority/LocalName:1.0"]
_0_PersonIdService._ad_PersonId = (omniORB.tcInternal.tv_alias, PersonId._NP_RepositoryId, "PersonId", omniORB.typeCodeMapping["IDL:omg.org/NamingAuthority/LocalName:1.0"]._d)
_0_PersonIdService._tc_PersonId = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_PersonId)
omniORB.registerType(PersonId._NP_RepositoryId, _0_PersonIdService._ad_PersonId, _0_PersonIdService._tc_PersonId)
del PersonId

# typedef ... PersonIdSeq
class PersonIdSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/PersonIdSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.PersonIdSeq = PersonIdSeq
_0_PersonIdService._d_PersonIdSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], 0)
_0_PersonIdService._ad_PersonIdSeq = (omniORB.tcInternal.tv_alias, PersonIdSeq._NP_RepositoryId, "PersonIdSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], 0))
_0_PersonIdService._tc_PersonIdSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_PersonIdSeq)
omniORB.registerType(PersonIdSeq._NP_RepositoryId, _0_PersonIdService._ad_PersonIdSeq, _0_PersonIdService._tc_PersonIdSeq)
del PersonIdSeq

# typedef ... ConceptCode
class ConceptCode:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/ConceptCode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.ConceptCode = ConceptCode
_0_PersonIdService._d_ConceptCode  = omniORB.typeMapping["IDL:omg.org/NamingAuthority/LocalName:1.0"]
_0_PersonIdService._ad_ConceptCode = (omniORB.tcInternal.tv_alias, ConceptCode._NP_RepositoryId, "ConceptCode", omniORB.typeCodeMapping["IDL:omg.org/NamingAuthority/LocalName:1.0"]._d)
_0_PersonIdService._tc_ConceptCode = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_ConceptCode)
omniORB.registerType(ConceptCode._NP_RepositoryId, _0_PersonIdService._ad_ConceptCode, _0_PersonIdService._tc_ConceptCode)
del ConceptCode

# typedef ... CodingScheme
class CodingScheme (_0_NamingAuthority.AuthorityId):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/CodingScheme:1.0"

_0_PersonIdService.CodingScheme = CodingScheme
_0_PersonIdService._d_CodingScheme  = omniORB.typeMapping["IDL:omg.org/NamingAuthority/AuthorityId:1.0"]
_0_PersonIdService._ad_CodingScheme = (omniORB.tcInternal.tv_alias, CodingScheme._NP_RepositoryId, "CodingScheme", omniORB.typeMapping["IDL:omg.org/NamingAuthority/AuthorityId:1.0"])
_0_PersonIdService._tc_CodingScheme = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_CodingScheme)
omniORB.registerType(CodingScheme._NP_RepositoryId, _0_PersonIdService._ad_CodingScheme, _0_PersonIdService._tc_CodingScheme)
del CodingScheme

# struct QualifiedCode
_0_PersonIdService.QualifiedCode = omniORB.newEmptyClass()
class QualifiedCode:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/QualifiedCode:1.0"

    def __init__(self, coding_scheme, concept_code):
        self.coding_scheme = coding_scheme
        self.concept_code = concept_code

_0_PersonIdService.QualifiedCode = QualifiedCode
_0_PersonIdService._d_QualifiedCode  = (omniORB.tcInternal.tv_struct, QualifiedCode, QualifiedCode._NP_RepositoryId, "QualifiedCode", "coding_scheme", omniORB.typeMapping["IDL:omg.org/PersonIdService/CodingScheme:1.0"], "concept_code", omniORB.typeMapping["IDL:omg.org/PersonIdService/ConceptCode:1.0"])
_0_PersonIdService._tc_QualifiedCode = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_QualifiedCode)
omniORB.registerType(QualifiedCode._NP_RepositoryId, _0_PersonIdService._d_QualifiedCode, _0_PersonIdService._tc_QualifiedCode)
del QualifiedCode

# struct QualifiedCodeId
_0_PersonIdService.QualifiedCodeId = omniORB.newEmptyClass()
class QualifiedCodeId:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/QualifiedCodeId:1.0"

    def __init__(self, code, id):
        self.code = code
        self.id = id

_0_PersonIdService.QualifiedCodeId = QualifiedCodeId
_0_PersonIdService._d_QualifiedCodeId  = (omniORB.tcInternal.tv_struct, QualifiedCodeId, QualifiedCodeId._NP_RepositoryId, "QualifiedCodeId", "code", omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedCode:1.0"], "id", omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"])
_0_PersonIdService._tc_QualifiedCodeId = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_QualifiedCodeId)
omniORB.registerType(QualifiedCodeId._NP_RepositoryId, _0_PersonIdService._d_QualifiedCodeId, _0_PersonIdService._tc_QualifiedCodeId)
del QualifiedCodeId

# typedef ... QualifiedCodeIdSeq
class QualifiedCodeIdSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/QualifiedCodeIdSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.QualifiedCodeIdSeq = QualifiedCodeIdSeq
_0_PersonIdService._d_QualifiedCodeIdSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedCodeId:1.0"], 0)
_0_PersonIdService._ad_QualifiedCodeIdSeq = (omniORB.tcInternal.tv_alias, QualifiedCodeIdSeq._NP_RepositoryId, "QualifiedCodeIdSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedCodeId:1.0"], 0))
_0_PersonIdService._tc_QualifiedCodeIdSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_QualifiedCodeIdSeq)
omniORB.registerType(QualifiedCodeIdSeq._NP_RepositoryId, _0_PersonIdService._ad_QualifiedCodeIdSeq, _0_PersonIdService._tc_QualifiedCodeIdSeq)
del QualifiedCodeIdSeq

# struct QualifiedPersonId
_0_PersonIdService.QualifiedPersonId = omniORB.newEmptyClass()
class QualifiedPersonId:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/QualifiedPersonId:1.0"

    def __init__(self, domain, id):
        self.domain = domain
        self.id = id

_0_PersonIdService.QualifiedPersonId = QualifiedPersonId
_0_PersonIdService._d_QualifiedPersonId  = (omniORB.tcInternal.tv_struct, QualifiedPersonId, QualifiedPersonId._NP_RepositoryId, "QualifiedPersonId", "domain", omniORB.typeMapping["IDL:omg.org/PersonIdService/DomainName:1.0"], "id", omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"])
_0_PersonIdService._tc_QualifiedPersonId = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_QualifiedPersonId)
omniORB.registerType(QualifiedPersonId._NP_RepositoryId, _0_PersonIdService._d_QualifiedPersonId, _0_PersonIdService._tc_QualifiedPersonId)
del QualifiedPersonId

# typedef ... QualifiedPersonIdSeq
class QualifiedPersonIdSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/QualifiedPersonIdSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.QualifiedPersonIdSeq = QualifiedPersonIdSeq
_0_PersonIdService._d_QualifiedPersonIdSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedPersonId:1.0"], 0)
_0_PersonIdService._ad_QualifiedPersonIdSeq = (omniORB.tcInternal.tv_alias, QualifiedPersonIdSeq._NP_RepositoryId, "QualifiedPersonIdSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedPersonId:1.0"], 0))
_0_PersonIdService._tc_QualifiedPersonIdSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_QualifiedPersonIdSeq)
omniORB.registerType(QualifiedPersonIdSeq._NP_RepositoryId, _0_PersonIdService._ad_QualifiedPersonIdSeq, _0_PersonIdService._tc_QualifiedPersonIdSeq)
del QualifiedPersonIdSeq

# typedef ... QualifiedId
class QualifiedId:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/QualifiedId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.QualifiedId = QualifiedId
_0_PersonIdService._d_QualifiedId  = omniORB.tcInternal.tv_any
_0_PersonIdService._ad_QualifiedId = (omniORB.tcInternal.tv_alias, QualifiedId._NP_RepositoryId, "QualifiedId", omniORB.tcInternal.tv_any)
_0_PersonIdService._tc_QualifiedId = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_QualifiedId)
omniORB.registerType(QualifiedId._NP_RepositoryId, _0_PersonIdService._ad_QualifiedId, _0_PersonIdService._tc_QualifiedId)
del QualifiedId

# typedef ... QualifiedIdSeq
class QualifiedIdSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/QualifiedIdSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.QualifiedIdSeq = QualifiedIdSeq
_0_PersonIdService._d_QualifiedIdSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedId:1.0"], 0)
_0_PersonIdService._ad_QualifiedIdSeq = (omniORB.tcInternal.tv_alias, QualifiedIdSeq._NP_RepositoryId, "QualifiedIdSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedId:1.0"], 0))
_0_PersonIdService._tc_QualifiedIdSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_QualifiedIdSeq)
omniORB.registerType(QualifiedIdSeq._NP_RepositoryId, _0_PersonIdService._ad_QualifiedIdSeq, _0_PersonIdService._tc_QualifiedIdSeq)
del QualifiedIdSeq

# typedef ... TraitName
class TraitName:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TraitName:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.TraitName = TraitName
_0_PersonIdService._d_TraitName  = omniORB.typeMapping["IDL:omg.org/NamingAuthority/QualifiedNameStr:1.0"]
_0_PersonIdService._ad_TraitName = (omniORB.tcInternal.tv_alias, TraitName._NP_RepositoryId, "TraitName", omniORB.typeCodeMapping["IDL:omg.org/NamingAuthority/QualifiedNameStr:1.0"]._d)
_0_PersonIdService._tc_TraitName = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_TraitName)
omniORB.registerType(TraitName._NP_RepositoryId, _0_PersonIdService._ad_TraitName, _0_PersonIdService._tc_TraitName)
del TraitName

# typedef ... TraitNameSeq
class TraitNameSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TraitNameSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.TraitNameSeq = TraitNameSeq
_0_PersonIdService._d_TraitNameSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitName:1.0"], 0)
_0_PersonIdService._ad_TraitNameSeq = (omniORB.tcInternal.tv_alias, TraitNameSeq._NP_RepositoryId, "TraitNameSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitName:1.0"], 0))
_0_PersonIdService._tc_TraitNameSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_TraitNameSeq)
omniORB.registerType(TraitNameSeq._NP_RepositoryId, _0_PersonIdService._ad_TraitNameSeq, _0_PersonIdService._tc_TraitNameSeq)
del TraitNameSeq

# typedef ... TraitValue
class TraitValue:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TraitValue:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.TraitValue = TraitValue
_0_PersonIdService._d_TraitValue  = omniORB.tcInternal.tv_any
_0_PersonIdService._ad_TraitValue = (omniORB.tcInternal.tv_alias, TraitValue._NP_RepositoryId, "TraitValue", omniORB.tcInternal.tv_any)
_0_PersonIdService._tc_TraitValue = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_TraitValue)
omniORB.registerType(TraitValue._NP_RepositoryId, _0_PersonIdService._ad_TraitValue, _0_PersonIdService._tc_TraitValue)
del TraitValue

# struct Trait
_0_PersonIdService.Trait = omniORB.newEmptyClass()
class Trait:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/Trait:1.0"

    def __init__(self, name, value):
        self.name = name
        self.value = value

_0_PersonIdService.Trait = Trait
_0_PersonIdService._d_Trait  = (omniORB.tcInternal.tv_struct, Trait, Trait._NP_RepositoryId, "Trait", "name", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitName:1.0"], "value", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitValue:1.0"])
_0_PersonIdService._tc_Trait = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_Trait)
omniORB.registerType(Trait._NP_RepositoryId, _0_PersonIdService._d_Trait, _0_PersonIdService._tc_Trait)
del Trait

# typedef ... TraitSeq
class TraitSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TraitSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.TraitSeq = TraitSeq
_0_PersonIdService._d_TraitSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/Trait:1.0"], 0)
_0_PersonIdService._ad_TraitSeq = (omniORB.tcInternal.tv_alias, TraitSeq._NP_RepositoryId, "TraitSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/Trait:1.0"], 0))
_0_PersonIdService._tc_TraitSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_TraitSeq)
omniORB.registerType(TraitSeq._NP_RepositoryId, _0_PersonIdService._ad_TraitSeq, _0_PersonIdService._tc_TraitSeq)
del TraitSeq

# typedef ... Profile
class Profile:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/Profile:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.Profile = Profile
_0_PersonIdService._d_Profile  = omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitSeq:1.0"]
_0_PersonIdService._ad_Profile = (omniORB.tcInternal.tv_alias, Profile._NP_RepositoryId, "Profile", omniORB.typeCodeMapping["IDL:omg.org/PersonIdService/TraitSeq:1.0"]._d)
_0_PersonIdService._tc_Profile = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_Profile)
omniORB.registerType(Profile._NP_RepositoryId, _0_PersonIdService._ad_Profile, _0_PersonIdService._tc_Profile)
del Profile

# typedef ... ProfileSeq
class ProfileSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/ProfileSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.ProfileSeq = ProfileSeq
_0_PersonIdService._d_ProfileSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/Profile:1.0"], 0)
_0_PersonIdService._ad_ProfileSeq = (omniORB.tcInternal.tv_alias, ProfileSeq._NP_RepositoryId, "ProfileSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/Profile:1.0"], 0))
_0_PersonIdService._tc_ProfileSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_ProfileSeq)
omniORB.registerType(ProfileSeq._NP_RepositoryId, _0_PersonIdService._ad_ProfileSeq, _0_PersonIdService._tc_ProfileSeq)
del ProfileSeq

# enum IdState
_0_PersonIdService.UNKNOWN = omniORB.EnumItem("UNKNOWN", 0)
_0_PersonIdService.INVALID = omniORB.EnumItem("INVALID", 1)
_0_PersonIdService.TEMPORARY = omniORB.EnumItem("TEMPORARY", 2)
_0_PersonIdService.PERMANENT = omniORB.EnumItem("PERMANENT", 3)
_0_PersonIdService.DEACTIVATED = omniORB.EnumItem("DEACTIVATED", 4)
_0_PersonIdService.IdState = omniORB.Enum("IDL:omg.org/PersonIdService/IdState:1.0", (_0_PersonIdService.UNKNOWN, _0_PersonIdService.INVALID, _0_PersonIdService.TEMPORARY, _0_PersonIdService.PERMANENT, _0_PersonIdService.DEACTIVATED,))

_0_PersonIdService._d_IdState  = (omniORB.tcInternal.tv_enum, _0_PersonIdService.IdState._NP_RepositoryId, "IdState", _0_PersonIdService.IdState._items)
_0_PersonIdService._tc_IdState = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_IdState)
omniORB.registerType(_0_PersonIdService.IdState._NP_RepositoryId, _0_PersonIdService._d_IdState, _0_PersonIdService._tc_IdState)

# typedef ... IdStateSeq
class IdStateSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/IdStateSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.IdStateSeq = IdStateSeq
_0_PersonIdService._d_IdStateSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/IdState:1.0"], 0)
_0_PersonIdService._ad_IdStateSeq = (omniORB.tcInternal.tv_alias, IdStateSeq._NP_RepositoryId, "IdStateSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/IdState:1.0"], 0))
_0_PersonIdService._tc_IdStateSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_IdStateSeq)
omniORB.registerType(IdStateSeq._NP_RepositoryId, _0_PersonIdService._ad_IdStateSeq, _0_PersonIdService._tc_IdStateSeq)
del IdStateSeq

# struct IdInfo
_0_PersonIdService.IdInfo = omniORB.newEmptyClass()
class IdInfo:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/IdInfo:1.0"

    def __init__(self, id, state, preferred_id):
        self.id = id
        self.state = state
        self.preferred_id = preferred_id

_0_PersonIdService.IdInfo = IdInfo
_0_PersonIdService._d_IdInfo  = (omniORB.tcInternal.tv_struct, IdInfo, IdInfo._NP_RepositoryId, "IdInfo", "id", omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], "state", omniORB.typeMapping["IDL:omg.org/PersonIdService/IdState:1.0"], "preferred_id", omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"])
_0_PersonIdService._tc_IdInfo = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_IdInfo)
omniORB.registerType(IdInfo._NP_RepositoryId, _0_PersonIdService._d_IdInfo, _0_PersonIdService._tc_IdInfo)
del IdInfo

# typedef ... IdInfoSeq
class IdInfoSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/IdInfoSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.IdInfoSeq = IdInfoSeq
_0_PersonIdService._d_IdInfoSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/IdInfo:1.0"], 0)
_0_PersonIdService._ad_IdInfoSeq = (omniORB.tcInternal.tv_alias, IdInfoSeq._NP_RepositoryId, "IdInfoSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/IdInfo:1.0"], 0))
_0_PersonIdService._tc_IdInfoSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_IdInfoSeq)
omniORB.registerType(IdInfoSeq._NP_RepositoryId, _0_PersonIdService._ad_IdInfoSeq, _0_PersonIdService._tc_IdInfoSeq)
del IdInfoSeq

# typedef ... ComponentVersion
class ComponentVersion:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/ComponentVersion:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.ComponentVersion = ComponentVersion
_0_PersonIdService._d_ComponentVersion  = (omniORB.tcInternal.tv_string,0)
_0_PersonIdService._ad_ComponentVersion = (omniORB.tcInternal.tv_alias, ComponentVersion._NP_RepositoryId, "ComponentVersion", (omniORB.tcInternal.tv_string,0))
_0_PersonIdService._tc_ComponentVersion = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_ComponentVersion)
omniORB.registerType(ComponentVersion._NP_RepositoryId, _0_PersonIdService._ad_ComponentVersion, _0_PersonIdService._tc_ComponentVersion)
del ComponentVersion

# struct ComponentName
_0_PersonIdService.ComponentName = omniORB.newEmptyClass()
class ComponentName:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/ComponentName:1.0"

    def __init__(self, name, version):
        self.name = name
        self.version = version

_0_PersonIdService.ComponentName = ComponentName
_0_PersonIdService._d_ComponentName  = (omniORB.tcInternal.tv_struct, ComponentName, ComponentName._NP_RepositoryId, "ComponentName", "name", omniORB.typeMapping["IDL:omg.org/NamingAuthority/QualifiedName:1.0"], "version", omniORB.typeMapping["IDL:omg.org/PersonIdService/ComponentVersion:1.0"])
_0_PersonIdService._tc_ComponentName = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_ComponentName)
omniORB.registerType(ComponentName._NP_RepositoryId, _0_PersonIdService._d_ComponentName, _0_PersonIdService._tc_ComponentName)
del ComponentName

# struct TraitSpec
_0_PersonIdService.TraitSpec = omniORB.newEmptyClass()
class TraitSpec:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TraitSpec:1.0"

    def __init__(self, trait, mandatory, read_only, searchable):
        self.trait = trait
        self.mandatory = mandatory
        self.read_only = read_only
        self.searchable = searchable

_0_PersonIdService.TraitSpec = TraitSpec
_0_PersonIdService._d_TraitSpec  = (omniORB.tcInternal.tv_struct, TraitSpec, TraitSpec._NP_RepositoryId, "TraitSpec", "trait", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitName:1.0"], "mandatory", omniORB.tcInternal.tv_boolean, "read_only", omniORB.tcInternal.tv_boolean, "searchable", omniORB.tcInternal.tv_boolean)
_0_PersonIdService._tc_TraitSpec = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_TraitSpec)
omniORB.registerType(TraitSpec._NP_RepositoryId, _0_PersonIdService._d_TraitSpec, _0_PersonIdService._tc_TraitSpec)
del TraitSpec

# typedef ... TraitSpecSeq
class TraitSpecSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TraitSpecSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.TraitSpecSeq = TraitSpecSeq
_0_PersonIdService._d_TraitSpecSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitSpec:1.0"], 0)
_0_PersonIdService._ad_TraitSpecSeq = (omniORB.tcInternal.tv_alias, TraitSpecSeq._NP_RepositoryId, "TraitSpecSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitSpec:1.0"], 0))
_0_PersonIdService._tc_TraitSpecSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_TraitSpecSeq)
omniORB.registerType(TraitSpecSeq._NP_RepositoryId, _0_PersonIdService._ad_TraitSpecSeq, _0_PersonIdService._tc_TraitSpecSeq)
del TraitSpecSeq

# enum HowManyTraits
_0_PersonIdService.NO_TRAITS = omniORB.EnumItem("NO_TRAITS", 0)
_0_PersonIdService.SOME_TRAITS = omniORB.EnumItem("SOME_TRAITS", 1)
_0_PersonIdService.ALL_TRAITS = omniORB.EnumItem("ALL_TRAITS", 2)
_0_PersonIdService.HowManyTraits = omniORB.Enum("IDL:omg.org/PersonIdService/HowManyTraits:1.0", (_0_PersonIdService.NO_TRAITS, _0_PersonIdService.SOME_TRAITS, _0_PersonIdService.ALL_TRAITS,))

_0_PersonIdService._d_HowManyTraits  = (omniORB.tcInternal.tv_enum, _0_PersonIdService.HowManyTraits._NP_RepositoryId, "HowManyTraits", _0_PersonIdService.HowManyTraits._items)
_0_PersonIdService._tc_HowManyTraits = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_HowManyTraits)
omniORB.registerType(_0_PersonIdService.HowManyTraits._NP_RepositoryId, _0_PersonIdService._d_HowManyTraits, _0_PersonIdService._tc_HowManyTraits)

# union SpecifiedTraits
_0_PersonIdService.SpecifiedTraits = omniORB.newEmptyClass()
class SpecifiedTraits (omniORB.Union):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"

_0_PersonIdService.SpecifiedTraits = SpecifiedTraits

SpecifiedTraits._m_to_d = {"traits": _0_PersonIdService.SOME_TRAITS}
SpecifiedTraits._d_to_m = {_0_PersonIdService.SOME_TRAITS: "traits"}
SpecifiedTraits._def_m  = None
SpecifiedTraits._def_d  = None

_0_PersonIdService._m_SpecifiedTraits  = ((_0_PersonIdService.SOME_TRAITS, "traits", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"]),)
_0_PersonIdService._d_SpecifiedTraits  = (omniORB.tcInternal.tv_union, SpecifiedTraits, SpecifiedTraits._NP_RepositoryId, "SpecifiedTraits", omniORB.typeMapping["IDL:omg.org/PersonIdService/HowManyTraits:1.0"], -1, _0_PersonIdService._m_SpecifiedTraits, None, {_0_PersonIdService.SOME_TRAITS: _0_PersonIdService._m_SpecifiedTraits[0]})
_0_PersonIdService._tc_SpecifiedTraits = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_SpecifiedTraits)
omniORB.registerType(SpecifiedTraits._NP_RepositoryId, _0_PersonIdService._d_SpecifiedTraits, _0_PersonIdService._tc_SpecifiedTraits)
del SpecifiedTraits

# struct TaggedProfile
_0_PersonIdService.TaggedProfile = omniORB.newEmptyClass()
class TaggedProfile:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TaggedProfile:1.0"

    def __init__(self, id, profile):
        self.id = id
        self.profile = profile

_0_PersonIdService.TaggedProfile = TaggedProfile
_0_PersonIdService._d_TaggedProfile  = (omniORB.tcInternal.tv_struct, TaggedProfile, TaggedProfile._NP_RepositoryId, "TaggedProfile", "id", omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], "profile", omniORB.typeMapping["IDL:omg.org/PersonIdService/Profile:1.0"])
_0_PersonIdService._tc_TaggedProfile = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_TaggedProfile)
omniORB.registerType(TaggedProfile._NP_RepositoryId, _0_PersonIdService._d_TaggedProfile, _0_PersonIdService._tc_TaggedProfile)
del TaggedProfile

# typedef ... TaggedProfileSeq
class TaggedProfileSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TaggedProfileSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.TaggedProfileSeq = TaggedProfileSeq
_0_PersonIdService._d_TaggedProfileSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/TaggedProfile:1.0"], 0)
_0_PersonIdService._ad_TaggedProfileSeq = (omniORB.tcInternal.tv_alias, TaggedProfileSeq._NP_RepositoryId, "TaggedProfileSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/TaggedProfile:1.0"], 0))
_0_PersonIdService._tc_TaggedProfileSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_TaggedProfileSeq)
omniORB.registerType(TaggedProfileSeq._NP_RepositoryId, _0_PersonIdService._ad_TaggedProfileSeq, _0_PersonIdService._tc_TaggedProfileSeq)
del TaggedProfileSeq

# struct QualifiedTaggedProfile
_0_PersonIdService.QualifiedTaggedProfile = omniORB.newEmptyClass()
class QualifiedTaggedProfile:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/QualifiedTaggedProfile:1.0"

    def __init__(self, id, profile):
        self.id = id
        self.profile = profile

_0_PersonIdService.QualifiedTaggedProfile = QualifiedTaggedProfile
_0_PersonIdService._d_QualifiedTaggedProfile  = (omniORB.tcInternal.tv_struct, QualifiedTaggedProfile, QualifiedTaggedProfile._NP_RepositoryId, "QualifiedTaggedProfile", "id", omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedPersonId:1.0"], "profile", omniORB.typeMapping["IDL:omg.org/PersonIdService/Profile:1.0"])
_0_PersonIdService._tc_QualifiedTaggedProfile = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_QualifiedTaggedProfile)
omniORB.registerType(QualifiedTaggedProfile._NP_RepositoryId, _0_PersonIdService._d_QualifiedTaggedProfile, _0_PersonIdService._tc_QualifiedTaggedProfile)
del QualifiedTaggedProfile

# typedef ... QualifiedTaggedProfileSeq
class QualifiedTaggedProfileSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/QualifiedTaggedProfileSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.QualifiedTaggedProfileSeq = QualifiedTaggedProfileSeq
_0_PersonIdService._d_QualifiedTaggedProfileSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedTaggedProfile:1.0"], 0)
_0_PersonIdService._ad_QualifiedTaggedProfileSeq = (omniORB.tcInternal.tv_alias, QualifiedTaggedProfileSeq._NP_RepositoryId, "QualifiedTaggedProfileSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedTaggedProfile:1.0"], 0))
_0_PersonIdService._tc_QualifiedTaggedProfileSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_QualifiedTaggedProfileSeq)
omniORB.registerType(QualifiedTaggedProfileSeq._NP_RepositoryId, _0_PersonIdService._ad_QualifiedTaggedProfileSeq, _0_PersonIdService._tc_QualifiedTaggedProfileSeq)
del QualifiedTaggedProfileSeq

# struct ProfileUpdate
_0_PersonIdService.ProfileUpdate = omniORB.newEmptyClass()
class ProfileUpdate:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/ProfileUpdate:1.0"

    def __init__(self, id, del_list, modify_list):
        self.id = id
        self.del_list = del_list
        self.modify_list = modify_list

_0_PersonIdService.ProfileUpdate = ProfileUpdate
_0_PersonIdService._d_ProfileUpdate  = (omniORB.tcInternal.tv_struct, ProfileUpdate, ProfileUpdate._NP_RepositoryId, "ProfileUpdate", "id", omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], "del_list", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"], "modify_list", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitSeq:1.0"])
_0_PersonIdService._tc_ProfileUpdate = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_ProfileUpdate)
omniORB.registerType(ProfileUpdate._NP_RepositoryId, _0_PersonIdService._d_ProfileUpdate, _0_PersonIdService._tc_ProfileUpdate)
del ProfileUpdate

# typedef ... ProfileUpdateSeq
class ProfileUpdateSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/ProfileUpdateSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.ProfileUpdateSeq = ProfileUpdateSeq
_0_PersonIdService._d_ProfileUpdateSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/ProfileUpdate:1.0"], 0)
_0_PersonIdService._ad_ProfileUpdateSeq = (omniORB.tcInternal.tv_alias, ProfileUpdateSeq._NP_RepositoryId, "ProfileUpdateSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/ProfileUpdate:1.0"], 0))
_0_PersonIdService._tc_ProfileUpdateSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_ProfileUpdateSeq)
omniORB.registerType(ProfileUpdateSeq._NP_RepositoryId, _0_PersonIdService._ad_ProfileUpdateSeq, _0_PersonIdService._tc_ProfileUpdateSeq)
del ProfileUpdateSeq

# struct MergeStruct
_0_PersonIdService.MergeStruct = omniORB.newEmptyClass()
class MergeStruct:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/MergeStruct:1.0"

    def __init__(self, id, preferred_id):
        self.id = id
        self.preferred_id = preferred_id

_0_PersonIdService.MergeStruct = MergeStruct
_0_PersonIdService._d_MergeStruct  = (omniORB.tcInternal.tv_struct, MergeStruct, MergeStruct._NP_RepositoryId, "MergeStruct", "id", omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], "preferred_id", omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"])
_0_PersonIdService._tc_MergeStruct = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_MergeStruct)
omniORB.registerType(MergeStruct._NP_RepositoryId, _0_PersonIdService._d_MergeStruct, _0_PersonIdService._tc_MergeStruct)
del MergeStruct

# typedef ... MergeStructSeq
class MergeStructSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/MergeStructSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.MergeStructSeq = MergeStructSeq
_0_PersonIdService._d_MergeStructSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/MergeStruct:1.0"], 0)
_0_PersonIdService._ad_MergeStructSeq = (omniORB.tcInternal.tv_alias, MergeStructSeq._NP_RepositoryId, "MergeStructSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/MergeStruct:1.0"], 0))
_0_PersonIdService._tc_MergeStructSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_MergeStructSeq)
omniORB.registerType(MergeStructSeq._NP_RepositoryId, _0_PersonIdService._ad_MergeStructSeq, _0_PersonIdService._tc_MergeStructSeq)
del MergeStructSeq

# struct TraitSelector
_0_PersonIdService.TraitSelector = omniORB.newEmptyClass()
class TraitSelector:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TraitSelector:1.0"

    def __init__(self, trait, weight):
        self.trait = trait
        self.weight = weight

_0_PersonIdService.TraitSelector = TraitSelector
_0_PersonIdService._d_TraitSelector  = (omniORB.tcInternal.tv_struct, TraitSelector, TraitSelector._NP_RepositoryId, "TraitSelector", "trait", omniORB.typeMapping["IDL:omg.org/PersonIdService/Trait:1.0"], "weight", omniORB.tcInternal.tv_float)
_0_PersonIdService._tc_TraitSelector = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_TraitSelector)
omniORB.registerType(TraitSelector._NP_RepositoryId, _0_PersonIdService._d_TraitSelector, _0_PersonIdService._tc_TraitSelector)
del TraitSelector

# typedef ... TraitSelectorSeq
class TraitSelectorSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TraitSelectorSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.TraitSelectorSeq = TraitSelectorSeq
_0_PersonIdService._d_TraitSelectorSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitSelector:1.0"], 0)
_0_PersonIdService._ad_TraitSelectorSeq = (omniORB.tcInternal.tv_alias, TraitSelectorSeq._NP_RepositoryId, "TraitSelectorSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitSelector:1.0"], 0))
_0_PersonIdService._tc_TraitSelectorSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_TraitSelectorSeq)
omniORB.registerType(TraitSelectorSeq._NP_RepositoryId, _0_PersonIdService._ad_TraitSelectorSeq, _0_PersonIdService._tc_TraitSelectorSeq)
del TraitSelectorSeq

# struct Candidate
_0_PersonIdService.Candidate = omniORB.newEmptyClass()
class Candidate:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/Candidate:1.0"

    def __init__(self, id, confidence, profile):
        self.id = id
        self.confidence = confidence
        self.profile = profile

_0_PersonIdService.Candidate = Candidate
_0_PersonIdService._d_Candidate  = (omniORB.tcInternal.tv_struct, Candidate, Candidate._NP_RepositoryId, "Candidate", "id", omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], "confidence", omniORB.tcInternal.tv_float, "profile", omniORB.typeMapping["IDL:omg.org/PersonIdService/Profile:1.0"])
_0_PersonIdService._tc_Candidate = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_Candidate)
omniORB.registerType(Candidate._NP_RepositoryId, _0_PersonIdService._d_Candidate, _0_PersonIdService._tc_Candidate)
del Candidate

# typedef ... CandidateSeq
class CandidateSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/CandidateSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.CandidateSeq = CandidateSeq
_0_PersonIdService._d_CandidateSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/Candidate:1.0"], 0)
_0_PersonIdService._ad_CandidateSeq = (omniORB.tcInternal.tv_alias, CandidateSeq._NP_RepositoryId, "CandidateSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/Candidate:1.0"], 0))
_0_PersonIdService._tc_CandidateSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_CandidateSeq)
omniORB.registerType(CandidateSeq._NP_RepositoryId, _0_PersonIdService._ad_CandidateSeq, _0_PersonIdService._tc_CandidateSeq)
del CandidateSeq

# interface CandidateIterator
_0_PersonIdService._d_CandidateIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/CandidateIterator:1.0", "CandidateIterator")
omniORB.typeMapping["IDL:omg.org/PersonIdService/CandidateIterator:1.0"] = _0_PersonIdService._d_CandidateIterator
_0_PersonIdService.CandidateIterator = omniORB.newEmptyClass()
class CandidateIterator :
    _NP_RepositoryId = _0_PersonIdService._d_CandidateIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_PersonIdService.CandidateIterator = CandidateIterator
_0_PersonIdService._tc_CandidateIterator = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_CandidateIterator)
omniORB.registerType(CandidateIterator._NP_RepositoryId, _0_PersonIdService._d_CandidateIterator, _0_PersonIdService._tc_CandidateIterator)

# CandidateIterator operations and attributes
CandidateIterator._d_max_left = ((), (omniORB.tcInternal.tv_ulong, ), None)
CandidateIterator._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:omg.org/PersonIdService/CandidateSeq:1.0"]), None)
CandidateIterator._d_destroy = ((), (), None)

# CandidateIterator object reference
class _objref_CandidateIterator (CORBA.Object):
    _NP_RepositoryId = CandidateIterator._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def max_left(self, *args):
        return _omnipy.invoke(self, "max_left", _0_PersonIdService.CandidateIterator._d_max_left, args)

    def next_n(self, *args):
        return _omnipy.invoke(self, "next_n", _0_PersonIdService.CandidateIterator._d_next_n, args)

    def destroy(self, *args):
        return _omnipy.invoke(self, "destroy", _0_PersonIdService.CandidateIterator._d_destroy, args)

    __methods__ = ["max_left", "next_n", "destroy"] + CORBA.Object.__methods__

omniORB.registerObjref(CandidateIterator._NP_RepositoryId, _objref_CandidateIterator)
_0_PersonIdService._objref_CandidateIterator = _objref_CandidateIterator
del CandidateIterator, _objref_CandidateIterator

# CandidateIterator skeleton
__name__ = "PersonIdService__POA"
class CandidateIterator (PortableServer.Servant):
    _NP_RepositoryId = _0_PersonIdService.CandidateIterator._NP_RepositoryId


    _omni_op_d = {"max_left": _0_PersonIdService.CandidateIterator._d_max_left, "next_n": _0_PersonIdService.CandidateIterator._d_next_n, "destroy": _0_PersonIdService.CandidateIterator._d_destroy}

CandidateIterator._omni_skeleton = CandidateIterator
_0_PersonIdService__POA.CandidateIterator = CandidateIterator
del CandidateIterator
__name__ = "PersonIdService"

# typedef ... Index
class Index:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/Index:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.Index = Index
_0_PersonIdService._d_Index  = omniORB.tcInternal.tv_ulong
_0_PersonIdService._ad_Index = (omniORB.tcInternal.tv_alias, Index._NP_RepositoryId, "Index", omniORB.tcInternal.tv_ulong)
_0_PersonIdService._tc_Index = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_Index)
omniORB.registerType(Index._NP_RepositoryId, _0_PersonIdService._ad_Index, _0_PersonIdService._tc_Index)
del Index

# typedef ... IndexSeq
class IndexSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/IndexSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.IndexSeq = IndexSeq
_0_PersonIdService._d_IndexSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/Index:1.0"], 0)
_0_PersonIdService._ad_IndexSeq = (omniORB.tcInternal.tv_alias, IndexSeq._NP_RepositoryId, "IndexSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/Index:1.0"], 0))
_0_PersonIdService._tc_IndexSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_IndexSeq)
omniORB.registerType(IndexSeq._NP_RepositoryId, _0_PersonIdService._ad_IndexSeq, _0_PersonIdService._tc_IndexSeq)
del IndexSeq

# enum ExceptionReason
_0_PersonIdService.UNKNOWN_TRAITS = omniORB.EnumItem("UNKNOWN_TRAITS", 0)
_0_PersonIdService.DUPLICATE_TRAITS = omniORB.EnumItem("DUPLICATE_TRAITS", 1)
_0_PersonIdService.WRONG_TRAIT_FORMAT = omniORB.EnumItem("WRONG_TRAIT_FORMAT", 2)
_0_PersonIdService.REQUIRED_TRAITS = omniORB.EnumItem("REQUIRED_TRAITS", 3)
_0_PersonIdService.READONLY_TRAITS = omniORB.EnumItem("READONLY_TRAITS", 4)
_0_PersonIdService.CANNOT_REMOVE = omniORB.EnumItem("CANNOT_REMOVE", 5)
_0_PersonIdService.MODIFY_OR_DELETE = omniORB.EnumItem("MODIFY_OR_DELETE", 6)
_0_PersonIdService.ExceptionReason = omniORB.Enum("IDL:omg.org/PersonIdService/ExceptionReason:1.0", (_0_PersonIdService.UNKNOWN_TRAITS, _0_PersonIdService.DUPLICATE_TRAITS, _0_PersonIdService.WRONG_TRAIT_FORMAT, _0_PersonIdService.REQUIRED_TRAITS, _0_PersonIdService.READONLY_TRAITS, _0_PersonIdService.CANNOT_REMOVE, _0_PersonIdService.MODIFY_OR_DELETE,))

_0_PersonIdService._d_ExceptionReason  = (omniORB.tcInternal.tv_enum, _0_PersonIdService.ExceptionReason._NP_RepositoryId, "ExceptionReason", _0_PersonIdService.ExceptionReason._items)
_0_PersonIdService._tc_ExceptionReason = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_ExceptionReason)
omniORB.registerType(_0_PersonIdService.ExceptionReason._NP_RepositoryId, _0_PersonIdService._d_ExceptionReason, _0_PersonIdService._tc_ExceptionReason)

# struct MultipleFailure
_0_PersonIdService.MultipleFailure = omniORB.newEmptyClass()
class MultipleFailure:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/MultipleFailure:1.0"

    def __init__(self, the_index, reason, traits):
        self.the_index = the_index
        self.reason = reason
        self.traits = traits

_0_PersonIdService.MultipleFailure = MultipleFailure
_0_PersonIdService._d_MultipleFailure  = (omniORB.tcInternal.tv_struct, MultipleFailure, MultipleFailure._NP_RepositoryId, "MultipleFailure", "the_index", omniORB.typeMapping["IDL:omg.org/PersonIdService/Index:1.0"], "reason", omniORB.typeMapping["IDL:omg.org/PersonIdService/ExceptionReason:1.0"], "traits", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"])
_0_PersonIdService._tc_MultipleFailure = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_MultipleFailure)
omniORB.registerType(MultipleFailure._NP_RepositoryId, _0_PersonIdService._d_MultipleFailure, _0_PersonIdService._tc_MultipleFailure)
del MultipleFailure

# typedef ... MultipleFailureSeq
class MultipleFailureSeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/MultipleFailureSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.MultipleFailureSeq = MultipleFailureSeq
_0_PersonIdService._d_MultipleFailureSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/MultipleFailure:1.0"], 0)
_0_PersonIdService._ad_MultipleFailureSeq = (omniORB.tcInternal.tv_alias, MultipleFailureSeq._NP_RepositoryId, "MultipleFailureSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/MultipleFailure:1.0"], 0))
_0_PersonIdService._tc_MultipleFailureSeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_MultipleFailureSeq)
omniORB.registerType(MultipleFailureSeq._NP_RepositoryId, _0_PersonIdService._ad_MultipleFailureSeq, _0_PersonIdService._tc_MultipleFailureSeq)
del MultipleFailureSeq

# exception InvalidId
_0_PersonIdService.InvalidId = omniORB.newEmptyClass()
class InvalidId (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/InvalidId:1.0"

    def __init__(self, id_info):
        CORBA.UserException.__init__(self, id_info)
        self.id_info = id_info

_0_PersonIdService.InvalidId = InvalidId
_0_PersonIdService._d_InvalidId  = (omniORB.tcInternal.tv_except, InvalidId, InvalidId._NP_RepositoryId, "InvalidId", "id_info", omniORB.typeMapping["IDL:omg.org/PersonIdService/IdInfo:1.0"])
_0_PersonIdService._tc_InvalidId = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_InvalidId)
omniORB.registerType(InvalidId._NP_RepositoryId, _0_PersonIdService._d_InvalidId, _0_PersonIdService._tc_InvalidId)
del InvalidId

# exception InvalidIds
_0_PersonIdService.InvalidIds = omniORB.newEmptyClass()
class InvalidIds (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/InvalidIds:1.0"

    def __init__(self, id_info):
        CORBA.UserException.__init__(self, id_info)
        self.id_info = id_info

_0_PersonIdService.InvalidIds = InvalidIds
_0_PersonIdService._d_InvalidIds  = (omniORB.tcInternal.tv_except, InvalidIds, InvalidIds._NP_RepositoryId, "InvalidIds", "id_info", omniORB.typeMapping["IDL:omg.org/PersonIdService/IdInfoSeq:1.0"])
_0_PersonIdService._tc_InvalidIds = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_InvalidIds)
omniORB.registerType(InvalidIds._NP_RepositoryId, _0_PersonIdService._d_InvalidIds, _0_PersonIdService._tc_InvalidIds)
del InvalidIds

# exception DuplicateIds
_0_PersonIdService.DuplicateIds = omniORB.newEmptyClass()
class DuplicateIds (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/DuplicateIds:1.0"

    def __init__(self, ids):
        CORBA.UserException.__init__(self, ids)
        self.ids = ids

_0_PersonIdService.DuplicateIds = DuplicateIds
_0_PersonIdService._d_DuplicateIds  = (omniORB.tcInternal.tv_except, DuplicateIds, DuplicateIds._NP_RepositoryId, "DuplicateIds", "ids", omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"])
_0_PersonIdService._tc_DuplicateIds = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_DuplicateIds)
omniORB.registerType(DuplicateIds._NP_RepositoryId, _0_PersonIdService._d_DuplicateIds, _0_PersonIdService._tc_DuplicateIds)
del DuplicateIds

# exception UnknownTraits
_0_PersonIdService.UnknownTraits = omniORB.newEmptyClass()
class UnknownTraits (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/UnknownTraits:1.0"

    def __init__(self, traits):
        CORBA.UserException.__init__(self, traits)
        self.traits = traits

_0_PersonIdService.UnknownTraits = UnknownTraits
_0_PersonIdService._d_UnknownTraits  = (omniORB.tcInternal.tv_except, UnknownTraits, UnknownTraits._NP_RepositoryId, "UnknownTraits", "traits", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"])
_0_PersonIdService._tc_UnknownTraits = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_UnknownTraits)
omniORB.registerType(UnknownTraits._NP_RepositoryId, _0_PersonIdService._d_UnknownTraits, _0_PersonIdService._tc_UnknownTraits)
del UnknownTraits

# exception DuplicateTraits
_0_PersonIdService.DuplicateTraits = omniORB.newEmptyClass()
class DuplicateTraits (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/DuplicateTraits:1.0"

    def __init__(self, traits):
        CORBA.UserException.__init__(self, traits)
        self.traits = traits

_0_PersonIdService.DuplicateTraits = DuplicateTraits
_0_PersonIdService._d_DuplicateTraits  = (omniORB.tcInternal.tv_except, DuplicateTraits, DuplicateTraits._NP_RepositoryId, "DuplicateTraits", "traits", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"])
_0_PersonIdService._tc_DuplicateTraits = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_DuplicateTraits)
omniORB.registerType(DuplicateTraits._NP_RepositoryId, _0_PersonIdService._d_DuplicateTraits, _0_PersonIdService._tc_DuplicateTraits)
del DuplicateTraits

# exception WrongTraitFormat
_0_PersonIdService.WrongTraitFormat = omniORB.newEmptyClass()
class WrongTraitFormat (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/WrongTraitFormat:1.0"

    def __init__(self, traits):
        CORBA.UserException.__init__(self, traits)
        self.traits = traits

_0_PersonIdService.WrongTraitFormat = WrongTraitFormat
_0_PersonIdService._d_WrongTraitFormat  = (omniORB.tcInternal.tv_except, WrongTraitFormat, WrongTraitFormat._NP_RepositoryId, "WrongTraitFormat", "traits", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"])
_0_PersonIdService._tc_WrongTraitFormat = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_WrongTraitFormat)
omniORB.registerType(WrongTraitFormat._NP_RepositoryId, _0_PersonIdService._d_WrongTraitFormat, _0_PersonIdService._tc_WrongTraitFormat)
del WrongTraitFormat

# exception InvalidStates
_0_PersonIdService.InvalidStates = omniORB.newEmptyClass()
class InvalidStates (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/InvalidStates:1.0"


_0_PersonIdService.InvalidStates = InvalidStates
_0_PersonIdService._d_InvalidStates  = (omniORB.tcInternal.tv_except, InvalidStates, InvalidStates._NP_RepositoryId, "InvalidStates")
_0_PersonIdService._tc_InvalidStates = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_InvalidStates)
omniORB.registerType(InvalidStates._NP_RepositoryId, _0_PersonIdService._d_InvalidStates, _0_PersonIdService._tc_InvalidStates)
del InvalidStates

# exception TooMany
_0_PersonIdService.TooMany = omniORB.newEmptyClass()
class TooMany (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/TooMany:1.0"

    def __init__(self, estimated_max):
        CORBA.UserException.__init__(self, estimated_max)
        self.estimated_max = estimated_max

_0_PersonIdService.TooMany = TooMany
_0_PersonIdService._d_TooMany  = (omniORB.tcInternal.tv_except, TooMany, TooMany._NP_RepositoryId, "TooMany", "estimated_max", omniORB.tcInternal.tv_ulong)
_0_PersonIdService._tc_TooMany = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_TooMany)
omniORB.registerType(TooMany._NP_RepositoryId, _0_PersonIdService._d_TooMany, _0_PersonIdService._tc_TooMany)
del TooMany

# exception MultipleTraits
_0_PersonIdService.MultipleTraits = omniORB.newEmptyClass()
class MultipleTraits (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/MultipleTraits:1.0"

    def __init__(self, failures):
        CORBA.UserException.__init__(self, failures)
        self.failures = failures

_0_PersonIdService.MultipleTraits = MultipleTraits
_0_PersonIdService._d_MultipleTraits  = (omniORB.tcInternal.tv_except, MultipleTraits, MultipleTraits._NP_RepositoryId, "MultipleTraits", "failures", omniORB.typeMapping["IDL:omg.org/PersonIdService/MultipleFailureSeq:1.0"])
_0_PersonIdService._tc_MultipleTraits = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_MultipleTraits)
omniORB.registerType(MultipleTraits._NP_RepositoryId, _0_PersonIdService._d_MultipleTraits, _0_PersonIdService._tc_MultipleTraits)
del MultipleTraits

# exception ReadOnlyTraits
_0_PersonIdService.ReadOnlyTraits = omniORB.newEmptyClass()
class ReadOnlyTraits (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/ReadOnlyTraits:1.0"

    def __init__(self, traits):
        CORBA.UserException.__init__(self, traits)
        self.traits = traits

_0_PersonIdService.ReadOnlyTraits = ReadOnlyTraits
_0_PersonIdService._d_ReadOnlyTraits  = (omniORB.tcInternal.tv_except, ReadOnlyTraits, ReadOnlyTraits._NP_RepositoryId, "ReadOnlyTraits", "traits", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"])
_0_PersonIdService._tc_ReadOnlyTraits = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_ReadOnlyTraits)
omniORB.registerType(ReadOnlyTraits._NP_RepositoryId, _0_PersonIdService._d_ReadOnlyTraits, _0_PersonIdService._tc_ReadOnlyTraits)
del ReadOnlyTraits

# exception CannotRemove
_0_PersonIdService.CannotRemove = omniORB.newEmptyClass()
class CannotRemove (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/CannotRemove:1.0"

    def __init__(self, traits):
        CORBA.UserException.__init__(self, traits)
        self.traits = traits

_0_PersonIdService.CannotRemove = CannotRemove
_0_PersonIdService._d_CannotRemove  = (omniORB.tcInternal.tv_except, CannotRemove, CannotRemove._NP_RepositoryId, "CannotRemove", "traits", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"])
_0_PersonIdService._tc_CannotRemove = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_CannotRemove)
omniORB.registerType(CannotRemove._NP_RepositoryId, _0_PersonIdService._d_CannotRemove, _0_PersonIdService._tc_CannotRemove)
del CannotRemove

# exception ModifyOrDelete
_0_PersonIdService.ModifyOrDelete = omniORB.newEmptyClass()
class ModifyOrDelete (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/ModifyOrDelete:1.0"

    def __init__(self, failures):
        CORBA.UserException.__init__(self, failures)
        self.failures = failures

_0_PersonIdService.ModifyOrDelete = ModifyOrDelete
_0_PersonIdService._d_ModifyOrDelete  = (omniORB.tcInternal.tv_except, ModifyOrDelete, ModifyOrDelete._NP_RepositoryId, "ModifyOrDelete", "failures", omniORB.typeMapping["IDL:omg.org/PersonIdService/MultipleFailureSeq:1.0"])
_0_PersonIdService._tc_ModifyOrDelete = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_ModifyOrDelete)
omniORB.registerType(ModifyOrDelete._NP_RepositoryId, _0_PersonIdService._d_ModifyOrDelete, _0_PersonIdService._tc_ModifyOrDelete)
del ModifyOrDelete

# exception NotImplemented
_0_PersonIdService.NotImplemented = omniORB.newEmptyClass()
class NotImplemented (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/NotImplemented:1.0"


_0_PersonIdService.NotImplemented = NotImplemented
_0_PersonIdService._d_NotImplemented  = (omniORB.tcInternal.tv_except, NotImplemented, NotImplemented._NP_RepositoryId, "NotImplemented")
_0_PersonIdService._tc_NotImplemented = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_NotImplemented)
omniORB.registerType(NotImplemented._NP_RepositoryId, _0_PersonIdService._d_NotImplemented, _0_PersonIdService._tc_NotImplemented)
del NotImplemented

# exception InvalidWeight
_0_PersonIdService.InvalidWeight = omniORB.newEmptyClass()
class InvalidWeight (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/InvalidWeight:1.0"


_0_PersonIdService.InvalidWeight = InvalidWeight
_0_PersonIdService._d_InvalidWeight  = (omniORB.tcInternal.tv_except, InvalidWeight, InvalidWeight._NP_RepositoryId, "InvalidWeight")
_0_PersonIdService._tc_InvalidWeight = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_InvalidWeight)
omniORB.registerType(InvalidWeight._NP_RepositoryId, _0_PersonIdService._d_InvalidWeight, _0_PersonIdService._tc_InvalidWeight)
del InvalidWeight

# exception CannotSearchOn
_0_PersonIdService.CannotSearchOn = omniORB.newEmptyClass()
class CannotSearchOn (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/CannotSearchOn:1.0"

    def __init__(self, traits):
        CORBA.UserException.__init__(self, traits)
        self.traits = traits

_0_PersonIdService.CannotSearchOn = CannotSearchOn
_0_PersonIdService._d_CannotSearchOn  = (omniORB.tcInternal.tv_except, CannotSearchOn, CannotSearchOn._NP_RepositoryId, "CannotSearchOn", "traits", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"])
_0_PersonIdService._tc_CannotSearchOn = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_CannotSearchOn)
omniORB.registerType(CannotSearchOn._NP_RepositoryId, _0_PersonIdService._d_CannotSearchOn, _0_PersonIdService._tc_CannotSearchOn)
del CannotSearchOn

# exception IdsExist
_0_PersonIdService.IdsExist = omniORB.newEmptyClass()
class IdsExist (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/IdsExist:1.0"

    def __init__(self, indices):
        CORBA.UserException.__init__(self, indices)
        self.indices = indices

_0_PersonIdService.IdsExist = IdsExist
_0_PersonIdService._d_IdsExist  = (omniORB.tcInternal.tv_except, IdsExist, IdsExist._NP_RepositoryId, "IdsExist", "indices", omniORB.typeMapping["IDL:omg.org/PersonIdService/IndexSeq:1.0"])
_0_PersonIdService._tc_IdsExist = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_IdsExist)
omniORB.registerType(IdsExist._NP_RepositoryId, _0_PersonIdService._d_IdsExist, _0_PersonIdService._tc_IdsExist)
del IdsExist

# exception RequiredTraits
_0_PersonIdService.RequiredTraits = omniORB.newEmptyClass()
class RequiredTraits (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/RequiredTraits:1.0"

    def __init__(self, traits):
        CORBA.UserException.__init__(self, traits)
        self.traits = traits

_0_PersonIdService.RequiredTraits = RequiredTraits
_0_PersonIdService._d_RequiredTraits  = (omniORB.tcInternal.tv_except, RequiredTraits, RequiredTraits._NP_RepositoryId, "RequiredTraits", "traits", omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"])
_0_PersonIdService._tc_RequiredTraits = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_RequiredTraits)
omniORB.registerType(RequiredTraits._NP_RepositoryId, _0_PersonIdService._d_RequiredTraits, _0_PersonIdService._tc_RequiredTraits)
del RequiredTraits

# exception ProfilesExist
_0_PersonIdService.ProfilesExist = omniORB.newEmptyClass()
class ProfilesExist (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/ProfilesExist:1.0"

    def __init__(self, indices):
        CORBA.UserException.__init__(self, indices)
        self.indices = indices

_0_PersonIdService.ProfilesExist = ProfilesExist
_0_PersonIdService._d_ProfilesExist  = (omniORB.tcInternal.tv_except, ProfilesExist, ProfilesExist._NP_RepositoryId, "ProfilesExist", "indices", omniORB.typeMapping["IDL:omg.org/PersonIdService/IndexSeq:1.0"])
_0_PersonIdService._tc_ProfilesExist = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_ProfilesExist)
omniORB.registerType(ProfilesExist._NP_RepositoryId, _0_PersonIdService._d_ProfilesExist, _0_PersonIdService._tc_ProfilesExist)
del ProfilesExist

# exception DuplicateProfiles
_0_PersonIdService.DuplicateProfiles = omniORB.newEmptyClass()
class DuplicateProfiles (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/DuplicateProfiles:1.0"

    def __init__(self, indices):
        CORBA.UserException.__init__(self, indices)
        self.indices = indices

_0_PersonIdService.DuplicateProfiles = DuplicateProfiles
_0_PersonIdService._d_DuplicateProfiles  = (omniORB.tcInternal.tv_except, DuplicateProfiles, DuplicateProfiles._NP_RepositoryId, "DuplicateProfiles", "indices", omniORB.typeMapping["IDL:omg.org/PersonIdService/IndexSeq:1.0"])
_0_PersonIdService._tc_DuplicateProfiles = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_DuplicateProfiles)
omniORB.registerType(DuplicateProfiles._NP_RepositoryId, _0_PersonIdService._d_DuplicateProfiles, _0_PersonIdService._tc_DuplicateProfiles)
del DuplicateProfiles

# exception DomainsNotKnown
_0_PersonIdService.DomainsNotKnown = omniORB.newEmptyClass()
class DomainsNotKnown (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/DomainsNotKnown:1.0"

    def __init__(self, domain_names):
        CORBA.UserException.__init__(self, domain_names)
        self.domain_names = domain_names

_0_PersonIdService.DomainsNotKnown = DomainsNotKnown
_0_PersonIdService._d_DomainsNotKnown  = (omniORB.tcInternal.tv_except, DomainsNotKnown, DomainsNotKnown._NP_RepositoryId, "DomainsNotKnown", "domain_names", omniORB.typeMapping["IDL:omg.org/PersonIdService/DomainNameSeq:1.0"])
_0_PersonIdService._tc_DomainsNotKnown = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_DomainsNotKnown)
omniORB.registerType(DomainsNotKnown._NP_RepositoryId, _0_PersonIdService._d_DomainsNotKnown, _0_PersonIdService._tc_DomainsNotKnown)
del DomainsNotKnown

# exception IdsNotKnown
_0_PersonIdService.IdsNotKnown = omniORB.newEmptyClass()
class IdsNotKnown (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/IdsNotKnown:1.0"

    def __init__(self, ids):
        CORBA.UserException.__init__(self, ids)
        self.ids = ids

_0_PersonIdService.IdsNotKnown = IdsNotKnown
_0_PersonIdService._d_IdsNotKnown  = (omniORB.tcInternal.tv_except, IdsNotKnown, IdsNotKnown._NP_RepositoryId, "IdsNotKnown", "ids", omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedPersonIdSeq:1.0"])
_0_PersonIdService._tc_IdsNotKnown = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_IdsNotKnown)
omniORB.registerType(IdsNotKnown._NP_RepositoryId, _0_PersonIdService._d_IdsNotKnown, _0_PersonIdService._tc_IdsNotKnown)
del IdsNotKnown

# typedef ... IdentitySeq
class IdentitySeq:
    _NP_RepositoryId = "IDL:omg.org/PersonIdService/IdentitySeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_PersonIdService.IdentitySeq = IdentitySeq
_0_PersonIdService._d_IdentitySeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/Identity:1.0"], 0)
_0_PersonIdService._ad_IdentitySeq = (omniORB.tcInternal.tv_alias, IdentitySeq._NP_RepositoryId, "IdentitySeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/PersonIdService/Identity:1.0"], 0))
_0_PersonIdService._tc_IdentitySeq = omniORB.tcInternal.createTypeCode(_0_PersonIdService._ad_IdentitySeq)
omniORB.registerType(IdentitySeq._NP_RepositoryId, _0_PersonIdService._ad_IdentitySeq, _0_PersonIdService._tc_IdentitySeq)
del IdentitySeq

# interface IdentificationComponent
_0_PersonIdService._d_IdentificationComponent = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/IdentificationComponent:1.0", "IdentificationComponent")
omniORB.typeMapping["IDL:omg.org/PersonIdService/IdentificationComponent:1.0"] = _0_PersonIdService._d_IdentificationComponent
_0_PersonIdService.IdentificationComponent = omniORB.newEmptyClass()
class IdentificationComponent :
    _NP_RepositoryId = _0_PersonIdService._d_IdentificationComponent[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_PersonIdService.IdentificationComponent = IdentificationComponent
_0_PersonIdService._tc_IdentificationComponent = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_IdentificationComponent)
omniORB.registerType(IdentificationComponent._NP_RepositoryId, _0_PersonIdService._d_IdentificationComponent, _0_PersonIdService._tc_IdentificationComponent)

# IdentificationComponent operations and attributes
IdentificationComponent._d__get_domain_name = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/DomainName:1.0"],),None)
IdentificationComponent._d__get_component_name = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/ComponentName:1.0"],),None)
IdentificationComponent._d__get_supported_traits = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitSpecSeq:1.0"],),None)
IdentificationComponent._d__get_identify_person = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/IdentifyPerson:1.0"],),None)
IdentificationComponent._d__get_profile_access = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/ProfileAccess:1.0"],),None)
IdentificationComponent._d__get_sequential_access = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/SequentialAccess:1.0"],),None)
IdentificationComponent._d__get_identity_access = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/IdentityAccess:1.0"],),None)
IdentificationComponent._d__get_id_mgr = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/IdMgr:1.0"],),None)
IdentificationComponent._d__get_correlation_mgr = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/CorrelationMgr:1.0"],),None)
IdentificationComponent._d__get_naming_context = ((),(omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContext:1.0"],),None)
IdentificationComponent._d__get_trader_components = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/TraderComponents:1.0"],),None)
IdentificationComponent._d_get_supported_properties = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitName:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosPropertyService/Properties:1.0"], ), {_0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits})

# IdentificationComponent object reference
class _objref_IdentificationComponent (CORBA.Object):
    _NP_RepositoryId = IdentificationComponent._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_domain_name(self, *args):
        return _omnipy.invoke(self, "_get_domain_name", _0_PersonIdService.IdentificationComponent._d__get_domain_name, args)

    def _get_component_name(self, *args):
        return _omnipy.invoke(self, "_get_component_name", _0_PersonIdService.IdentificationComponent._d__get_component_name, args)

    def _get_supported_traits(self, *args):
        return _omnipy.invoke(self, "_get_supported_traits", _0_PersonIdService.IdentificationComponent._d__get_supported_traits, args)

    def _get_identify_person(self, *args):
        return _omnipy.invoke(self, "_get_identify_person", _0_PersonIdService.IdentificationComponent._d__get_identify_person, args)

    def _get_profile_access(self, *args):
        return _omnipy.invoke(self, "_get_profile_access", _0_PersonIdService.IdentificationComponent._d__get_profile_access, args)

    def _get_sequential_access(self, *args):
        return _omnipy.invoke(self, "_get_sequential_access", _0_PersonIdService.IdentificationComponent._d__get_sequential_access, args)

    def _get_identity_access(self, *args):
        return _omnipy.invoke(self, "_get_identity_access", _0_PersonIdService.IdentificationComponent._d__get_identity_access, args)

    def _get_id_mgr(self, *args):
        return _omnipy.invoke(self, "_get_id_mgr", _0_PersonIdService.IdentificationComponent._d__get_id_mgr, args)

    def _get_correlation_mgr(self, *args):
        return _omnipy.invoke(self, "_get_correlation_mgr", _0_PersonIdService.IdentificationComponent._d__get_correlation_mgr, args)

    def _get_naming_context(self, *args):
        return _omnipy.invoke(self, "_get_naming_context", _0_PersonIdService.IdentificationComponent._d__get_naming_context, args)

    def _get_trader_components(self, *args):
        return _omnipy.invoke(self, "_get_trader_components", _0_PersonIdService.IdentificationComponent._d__get_trader_components, args)

    def get_supported_properties(self, *args):
        return _omnipy.invoke(self, "get_supported_properties", _0_PersonIdService.IdentificationComponent._d_get_supported_properties, args)

    __methods__ = ["_get_domain_name", "_get_component_name", "_get_supported_traits", "_get_identify_person", "_get_profile_access", "_get_sequential_access", "_get_identity_access", "_get_id_mgr", "_get_correlation_mgr", "_get_naming_context", "_get_trader_components", "get_supported_properties"] + CORBA.Object.__methods__

omniORB.registerObjref(IdentificationComponent._NP_RepositoryId, _objref_IdentificationComponent)
_0_PersonIdService._objref_IdentificationComponent = _objref_IdentificationComponent
del IdentificationComponent, _objref_IdentificationComponent

# IdentificationComponent skeleton
__name__ = "PersonIdService__POA"
class IdentificationComponent (PortableServer.Servant):
    _NP_RepositoryId = _0_PersonIdService.IdentificationComponent._NP_RepositoryId


    _omni_op_d = {"_get_domain_name": _0_PersonIdService.IdentificationComponent._d__get_domain_name, "_get_component_name": _0_PersonIdService.IdentificationComponent._d__get_component_name, "_get_supported_traits": _0_PersonIdService.IdentificationComponent._d__get_supported_traits, "_get_identify_person": _0_PersonIdService.IdentificationComponent._d__get_identify_person, "_get_profile_access": _0_PersonIdService.IdentificationComponent._d__get_profile_access, "_get_sequential_access": _0_PersonIdService.IdentificationComponent._d__get_sequential_access, "_get_identity_access": _0_PersonIdService.IdentificationComponent._d__get_identity_access, "_get_id_mgr": _0_PersonIdService.IdentificationComponent._d__get_id_mgr, "_get_correlation_mgr": _0_PersonIdService.IdentificationComponent._d__get_correlation_mgr, "_get_naming_context": _0_PersonIdService.IdentificationComponent._d__get_naming_context, "_get_trader_components": _0_PersonIdService.IdentificationComponent._d__get_trader_components, "get_supported_properties": _0_PersonIdService.IdentificationComponent._d_get_supported_properties}

IdentificationComponent._omni_skeleton = IdentificationComponent
_0_PersonIdService__POA.IdentificationComponent = IdentificationComponent
del IdentificationComponent
__name__ = "PersonIdService"

# interface IdentifyPerson
_0_PersonIdService._d_IdentifyPerson = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/IdentifyPerson:1.0", "IdentifyPerson")
omniORB.typeMapping["IDL:omg.org/PersonIdService/IdentifyPerson:1.0"] = _0_PersonIdService._d_IdentifyPerson
_0_PersonIdService.IdentifyPerson = omniORB.newEmptyClass()
class IdentifyPerson (_0_PersonIdService.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService._d_IdentifyPerson[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_PersonIdService.IdentifyPerson = IdentifyPerson
_0_PersonIdService._tc_IdentifyPerson = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_IdentifyPerson)
omniORB.registerType(IdentifyPerson._NP_RepositoryId, _0_PersonIdService._d_IdentifyPerson, _0_PersonIdService._tc_IdentifyPerson)

# IdentifyPerson operations and attributes
IdentifyPerson._d_find_candidates = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitSelectorSeq:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/IdStateSeq:1.0"], omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_ulong, omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"]), (omniORB.typeMapping["IDL:omg.org/PersonIdService/CandidateSeq:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/CandidateIterator:1.0"]), {_0_PersonIdService.TooMany._NP_RepositoryId: _0_PersonIdService._d_TooMany, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.WrongTraitFormat._NP_RepositoryId: _0_PersonIdService._d_WrongTraitFormat, _0_PersonIdService.CannotSearchOn._NP_RepositoryId: _0_PersonIdService._d_CannotSearchOn, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits, _0_PersonIdService.InvalidStates._NP_RepositoryId: _0_PersonIdService._d_InvalidStates, _0_PersonIdService.InvalidWeight._NP_RepositoryId: _0_PersonIdService._d_InvalidWeight})

# IdentifyPerson object reference
class _objref_IdentifyPerson (_0_PersonIdService._objref_IdentificationComponent):
    _NP_RepositoryId = IdentifyPerson._NP_RepositoryId

    def __init__(self):
        _0_PersonIdService._objref_IdentificationComponent.__init__(self)

    def find_candidates(self, *args):
        return _omnipy.invoke(self, "find_candidates", _0_PersonIdService.IdentifyPerson._d_find_candidates, args)

    __methods__ = ["find_candidates"] + _0_PersonIdService._objref_IdentificationComponent.__methods__

omniORB.registerObjref(IdentifyPerson._NP_RepositoryId, _objref_IdentifyPerson)
_0_PersonIdService._objref_IdentifyPerson = _objref_IdentifyPerson
del IdentifyPerson, _objref_IdentifyPerson

# IdentifyPerson skeleton
__name__ = "PersonIdService__POA"
class IdentifyPerson (_0_PersonIdService__POA.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService.IdentifyPerson._NP_RepositoryId


    _omni_op_d = {"find_candidates": _0_PersonIdService.IdentifyPerson._d_find_candidates}
    _omni_op_d.update(_0_PersonIdService__POA.IdentificationComponent._omni_op_d)

IdentifyPerson._omni_skeleton = IdentifyPerson
_0_PersonIdService__POA.IdentifyPerson = IdentifyPerson
del IdentifyPerson
__name__ = "PersonIdService"

# interface ProfileAccess
_0_PersonIdService._d_ProfileAccess = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/ProfileAccess:1.0", "ProfileAccess")
omniORB.typeMapping["IDL:omg.org/PersonIdService/ProfileAccess:1.0"] = _0_PersonIdService._d_ProfileAccess
_0_PersonIdService.ProfileAccess = omniORB.newEmptyClass()
class ProfileAccess (_0_PersonIdService.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService._d_ProfileAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_PersonIdService.ProfileAccess = ProfileAccess
_0_PersonIdService._tc_ProfileAccess = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_ProfileAccess)
omniORB.registerType(ProfileAccess._NP_RepositoryId, _0_PersonIdService._d_ProfileAccess, _0_PersonIdService._tc_ProfileAccess)

# ProfileAccess operations and attributes
ProfileAccess._d_get_traits_known = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"], ), {_0_PersonIdService.InvalidId._NP_RepositoryId: _0_PersonIdService._d_InvalidId})
ProfileAccess._d_get_profile = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"]), (omniORB.typeMapping["IDL:omg.org/PersonIdService/Profile:1.0"], ), {_0_PersonIdService.InvalidId._NP_RepositoryId: _0_PersonIdService._d_InvalidId, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits})
ProfileAccess._d_get_profile_list = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"]), (omniORB.typeMapping["IDL:omg.org/PersonIdService/TaggedProfileSeq:1.0"], ), {_0_PersonIdService.TooMany._NP_RepositoryId: _0_PersonIdService._d_TooMany, _0_PersonIdService.InvalidIds._NP_RepositoryId: _0_PersonIdService._d_InvalidIds, _0_PersonIdService.DuplicateIds._NP_RepositoryId: _0_PersonIdService._d_DuplicateIds, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits})
ProfileAccess._d_get_deactivated_profile_list = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"]), (omniORB.typeMapping["IDL:omg.org/PersonIdService/TaggedProfileSeq:1.0"], ), {_0_PersonIdService.NotImplemented._NP_RepositoryId: _0_PersonIdService._d_NotImplemented, _0_PersonIdService.InvalidIds._NP_RepositoryId: _0_PersonIdService._d_InvalidIds, _0_PersonIdService.DuplicateIds._NP_RepositoryId: _0_PersonIdService._d_DuplicateIds, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits})
ProfileAccess._d_update_and_clear_traits = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/ProfileUpdateSeq:1.0"], ), (), {_0_PersonIdService.InvalidIds._NP_RepositoryId: _0_PersonIdService._d_InvalidIds, _0_PersonIdService.DuplicateIds._NP_RepositoryId: _0_PersonIdService._d_DuplicateIds, _0_PersonIdService.NotImplemented._NP_RepositoryId: _0_PersonIdService._d_NotImplemented, _0_PersonIdService.MultipleTraits._NP_RepositoryId: _0_PersonIdService._d_MultipleTraits})
ProfileAccess._d_get_id_info = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/IdInfoSeq:1.0"], ), {_0_PersonIdService.TooMany._NP_RepositoryId: _0_PersonIdService._d_TooMany, _0_PersonIdService.DuplicateIds._NP_RepositoryId: _0_PersonIdService._d_DuplicateIds})

# ProfileAccess object reference
class _objref_ProfileAccess (_0_PersonIdService._objref_IdentificationComponent):
    _NP_RepositoryId = ProfileAccess._NP_RepositoryId

    def __init__(self):
        _0_PersonIdService._objref_IdentificationComponent.__init__(self)

    def get_traits_known(self, *args):
        return _omnipy.invoke(self, "get_traits_known", _0_PersonIdService.ProfileAccess._d_get_traits_known, args)

    def get_profile(self, *args):
        return _omnipy.invoke(self, "get_profile", _0_PersonIdService.ProfileAccess._d_get_profile, args)

    def get_profile_list(self, *args):
        return _omnipy.invoke(self, "get_profile_list", _0_PersonIdService.ProfileAccess._d_get_profile_list, args)

    def get_deactivated_profile_list(self, *args):
        return _omnipy.invoke(self, "get_deactivated_profile_list", _0_PersonIdService.ProfileAccess._d_get_deactivated_profile_list, args)

    def update_and_clear_traits(self, *args):
        return _omnipy.invoke(self, "update_and_clear_traits", _0_PersonIdService.ProfileAccess._d_update_and_clear_traits, args)

    def get_id_info(self, *args):
        return _omnipy.invoke(self, "get_id_info", _0_PersonIdService.ProfileAccess._d_get_id_info, args)

    __methods__ = ["get_traits_known", "get_profile", "get_profile_list", "get_deactivated_profile_list", "update_and_clear_traits", "get_id_info"] + _0_PersonIdService._objref_IdentificationComponent.__methods__

omniORB.registerObjref(ProfileAccess._NP_RepositoryId, _objref_ProfileAccess)
_0_PersonIdService._objref_ProfileAccess = _objref_ProfileAccess
del ProfileAccess, _objref_ProfileAccess

# ProfileAccess skeleton
__name__ = "PersonIdService__POA"
class ProfileAccess (_0_PersonIdService__POA.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService.ProfileAccess._NP_RepositoryId


    _omni_op_d = {"get_traits_known": _0_PersonIdService.ProfileAccess._d_get_traits_known, "get_profile": _0_PersonIdService.ProfileAccess._d_get_profile, "get_profile_list": _0_PersonIdService.ProfileAccess._d_get_profile_list, "get_deactivated_profile_list": _0_PersonIdService.ProfileAccess._d_get_deactivated_profile_list, "update_and_clear_traits": _0_PersonIdService.ProfileAccess._d_update_and_clear_traits, "get_id_info": _0_PersonIdService.ProfileAccess._d_get_id_info}
    _omni_op_d.update(_0_PersonIdService__POA.IdentificationComponent._omni_op_d)

ProfileAccess._omni_skeleton = ProfileAccess
_0_PersonIdService__POA.ProfileAccess = ProfileAccess
del ProfileAccess
__name__ = "PersonIdService"

# interface SequentialAccess
_0_PersonIdService._d_SequentialAccess = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/SequentialAccess:1.0", "SequentialAccess")
omniORB.typeMapping["IDL:omg.org/PersonIdService/SequentialAccess:1.0"] = _0_PersonIdService._d_SequentialAccess
_0_PersonIdService.SequentialAccess = omniORB.newEmptyClass()
class SequentialAccess (_0_PersonIdService.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService._d_SequentialAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_PersonIdService.SequentialAccess = SequentialAccess
_0_PersonIdService._tc_SequentialAccess = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_SequentialAccess)
omniORB.registerType(SequentialAccess._NP_RepositoryId, _0_PersonIdService._d_SequentialAccess, _0_PersonIdService._tc_SequentialAccess)

# SequentialAccess operations and attributes
SequentialAccess._d_id_count_per_state = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/IdStateSeq:1.0"], ), (omniORB.tcInternal.tv_ulong, ), {_0_PersonIdService.InvalidStates._NP_RepositoryId: _0_PersonIdService._d_InvalidStates})
SequentialAccess._d_get_all_ids_by_state = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/IdStateSeq:1.0"]), (omniORB.typeMapping["IDL:omg.org/PersonIdService/TaggedProfileSeq:1.0"], ), {_0_PersonIdService.TooMany._NP_RepositoryId: _0_PersonIdService._d_TooMany, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits, _0_PersonIdService.InvalidStates._NP_RepositoryId: _0_PersonIdService._d_InvalidStates})
SequentialAccess._d_get_first_ids = ((omniORB.tcInternal.tv_ulong, omniORB.typeMapping["IDL:omg.org/PersonIdService/IdStateSeq:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"]), (omniORB.typeMapping["IDL:omg.org/PersonIdService/TaggedProfileSeq:1.0"], ), {_0_PersonIdService.TooMany._NP_RepositoryId: _0_PersonIdService._d_TooMany, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits, _0_PersonIdService.InvalidStates._NP_RepositoryId: _0_PersonIdService._d_InvalidStates})
SequentialAccess._d_get_last_ids = ((omniORB.tcInternal.tv_ulong, omniORB.typeMapping["IDL:omg.org/PersonIdService/IdStateSeq:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"]), (omniORB.typeMapping["IDL:omg.org/PersonIdService/TaggedProfileSeq:1.0"], ), {_0_PersonIdService.TooMany._NP_RepositoryId: _0_PersonIdService._d_TooMany, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits, _0_PersonIdService.InvalidStates._NP_RepositoryId: _0_PersonIdService._d_InvalidStates})
SequentialAccess._d_get_next_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], omniORB.tcInternal.tv_ulong, omniORB.typeMapping["IDL:omg.org/PersonIdService/IdStateSeq:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"]), (omniORB.typeMapping["IDL:omg.org/PersonIdService/TaggedProfileSeq:1.0"], ), {_0_PersonIdService.TooMany._NP_RepositoryId: _0_PersonIdService._d_TooMany, _0_PersonIdService.InvalidId._NP_RepositoryId: _0_PersonIdService._d_InvalidId, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits, _0_PersonIdService.InvalidStates._NP_RepositoryId: _0_PersonIdService._d_InvalidStates})
SequentialAccess._d_get_previous_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], omniORB.tcInternal.tv_ulong, omniORB.typeMapping["IDL:omg.org/PersonIdService/IdStateSeq:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"]), (omniORB.typeMapping["IDL:omg.org/PersonIdService/TaggedProfileSeq:1.0"], ), {_0_PersonIdService.TooMany._NP_RepositoryId: _0_PersonIdService._d_TooMany, _0_PersonIdService.InvalidId._NP_RepositoryId: _0_PersonIdService._d_InvalidId, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits, _0_PersonIdService.InvalidStates._NP_RepositoryId: _0_PersonIdService._d_InvalidStates})

# SequentialAccess object reference
class _objref_SequentialAccess (_0_PersonIdService._objref_IdentificationComponent):
    _NP_RepositoryId = SequentialAccess._NP_RepositoryId

    def __init__(self):
        _0_PersonIdService._objref_IdentificationComponent.__init__(self)

    def id_count_per_state(self, *args):
        return _omnipy.invoke(self, "id_count_per_state", _0_PersonIdService.SequentialAccess._d_id_count_per_state, args)

    def get_all_ids_by_state(self, *args):
        return _omnipy.invoke(self, "get_all_ids_by_state", _0_PersonIdService.SequentialAccess._d_get_all_ids_by_state, args)

    def get_first_ids(self, *args):
        return _omnipy.invoke(self, "get_first_ids", _0_PersonIdService.SequentialAccess._d_get_first_ids, args)

    def get_last_ids(self, *args):
        return _omnipy.invoke(self, "get_last_ids", _0_PersonIdService.SequentialAccess._d_get_last_ids, args)

    def get_next_ids(self, *args):
        return _omnipy.invoke(self, "get_next_ids", _0_PersonIdService.SequentialAccess._d_get_next_ids, args)

    def get_previous_ids(self, *args):
        return _omnipy.invoke(self, "get_previous_ids", _0_PersonIdService.SequentialAccess._d_get_previous_ids, args)

    __methods__ = ["id_count_per_state", "get_all_ids_by_state", "get_first_ids", "get_last_ids", "get_next_ids", "get_previous_ids"] + _0_PersonIdService._objref_IdentificationComponent.__methods__

omniORB.registerObjref(SequentialAccess._NP_RepositoryId, _objref_SequentialAccess)
_0_PersonIdService._objref_SequentialAccess = _objref_SequentialAccess
del SequentialAccess, _objref_SequentialAccess

# SequentialAccess skeleton
__name__ = "PersonIdService__POA"
class SequentialAccess (_0_PersonIdService__POA.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService.SequentialAccess._NP_RepositoryId


    _omni_op_d = {"id_count_per_state": _0_PersonIdService.SequentialAccess._d_id_count_per_state, "get_all_ids_by_state": _0_PersonIdService.SequentialAccess._d_get_all_ids_by_state, "get_first_ids": _0_PersonIdService.SequentialAccess._d_get_first_ids, "get_last_ids": _0_PersonIdService.SequentialAccess._d_get_last_ids, "get_next_ids": _0_PersonIdService.SequentialAccess._d_get_next_ids, "get_previous_ids": _0_PersonIdService.SequentialAccess._d_get_previous_ids}
    _omni_op_d.update(_0_PersonIdService__POA.IdentificationComponent._omni_op_d)

SequentialAccess._omni_skeleton = SequentialAccess
_0_PersonIdService__POA.SequentialAccess = SequentialAccess
del SequentialAccess
__name__ = "PersonIdService"

# interface Identity
_0_PersonIdService._d_Identity = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/Identity:1.0", "Identity")
omniORB.typeMapping["IDL:omg.org/PersonIdService/Identity:1.0"] = _0_PersonIdService._d_Identity
_0_PersonIdService.Identity = omniORB.newEmptyClass()
class Identity :
    _NP_RepositoryId = _0_PersonIdService._d_Identity[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_PersonIdService.Identity = Identity
_0_PersonIdService._tc_Identity = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_Identity)
omniORB.registerType(Identity._NP_RepositoryId, _0_PersonIdService._d_Identity, _0_PersonIdService._tc_Identity)

# Identity operations and attributes
Identity._d__get_source_component = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/IdentificationComponent:1.0"],),None)
Identity._d__get_id_info = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/IdInfo:1.0"],),None)
Identity._d__get_traits_with_values = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitNameSeq:1.0"],),None)
Identity._d__get_trait_value_count = ((),(omniORB.tcInternal.tv_long,),None)
Identity._d_get_trait = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/TraitName:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/Trait:1.0"], ), {_0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits})
Identity._d_get_profile = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/Profile:1.0"], ), {_0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits})
Identity._d_get_deactivated_profile = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/SpecifiedTraits:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/Profile:1.0"], ), {_0_PersonIdService.NotImplemented._NP_RepositoryId: _0_PersonIdService._d_NotImplemented, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits})
Identity._d_update_and_clear_traits = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/ProfileUpdate:1.0"], ), (), {_0_PersonIdService.NotImplemented._NP_RepositoryId: _0_PersonIdService._d_NotImplemented, _0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.WrongTraitFormat._NP_RepositoryId: _0_PersonIdService._d_WrongTraitFormat, _0_PersonIdService.ModifyOrDelete._NP_RepositoryId: _0_PersonIdService._d_ModifyOrDelete, _0_PersonIdService.ReadOnlyTraits._NP_RepositoryId: _0_PersonIdService._d_ReadOnlyTraits, _0_PersonIdService.CannotRemove._NP_RepositoryId: _0_PersonIdService._d_CannotRemove, _0_PersonIdService.DuplicateTraits._NP_RepositoryId: _0_PersonIdService._d_DuplicateTraits})
Identity._d_done = ((), (), None)

# Identity object reference
class _objref_Identity (CORBA.Object):
    _NP_RepositoryId = Identity._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_source_component(self, *args):
        return _omnipy.invoke(self, "_get_source_component", _0_PersonIdService.Identity._d__get_source_component, args)

    def _get_id_info(self, *args):
        return _omnipy.invoke(self, "_get_id_info", _0_PersonIdService.Identity._d__get_id_info, args)

    def _get_traits_with_values(self, *args):
        return _omnipy.invoke(self, "_get_traits_with_values", _0_PersonIdService.Identity._d__get_traits_with_values, args)

    def _get_trait_value_count(self, *args):
        return _omnipy.invoke(self, "_get_trait_value_count", _0_PersonIdService.Identity._d__get_trait_value_count, args)

    def get_trait(self, *args):
        return _omnipy.invoke(self, "get_trait", _0_PersonIdService.Identity._d_get_trait, args)

    def get_profile(self, *args):
        return _omnipy.invoke(self, "get_profile", _0_PersonIdService.Identity._d_get_profile, args)

    def get_deactivated_profile(self, *args):
        return _omnipy.invoke(self, "get_deactivated_profile", _0_PersonIdService.Identity._d_get_deactivated_profile, args)

    def update_and_clear_traits(self, *args):
        return _omnipy.invoke(self, "update_and_clear_traits", _0_PersonIdService.Identity._d_update_and_clear_traits, args)

    def done(self, *args):
        return _omnipy.invoke(self, "done", _0_PersonIdService.Identity._d_done, args)

    __methods__ = ["_get_source_component", "_get_id_info", "_get_traits_with_values", "_get_trait_value_count", "get_trait", "get_profile", "get_deactivated_profile", "update_and_clear_traits", "done"] + CORBA.Object.__methods__

omniORB.registerObjref(Identity._NP_RepositoryId, _objref_Identity)
_0_PersonIdService._objref_Identity = _objref_Identity
del Identity, _objref_Identity

# Identity skeleton
__name__ = "PersonIdService__POA"
class Identity (PortableServer.Servant):
    _NP_RepositoryId = _0_PersonIdService.Identity._NP_RepositoryId


    _omni_op_d = {"_get_source_component": _0_PersonIdService.Identity._d__get_source_component, "_get_id_info": _0_PersonIdService.Identity._d__get_id_info, "_get_traits_with_values": _0_PersonIdService.Identity._d__get_traits_with_values, "_get_trait_value_count": _0_PersonIdService.Identity._d__get_trait_value_count, "get_trait": _0_PersonIdService.Identity._d_get_trait, "get_profile": _0_PersonIdService.Identity._d_get_profile, "get_deactivated_profile": _0_PersonIdService.Identity._d_get_deactivated_profile, "update_and_clear_traits": _0_PersonIdService.Identity._d_update_and_clear_traits, "done": _0_PersonIdService.Identity._d_done}

Identity._omni_skeleton = Identity
_0_PersonIdService__POA.Identity = Identity
del Identity
__name__ = "PersonIdService"

# interface IdentityAccess
_0_PersonIdService._d_IdentityAccess = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/IdentityAccess:1.0", "IdentityAccess")
omniORB.typeMapping["IDL:omg.org/PersonIdService/IdentityAccess:1.0"] = _0_PersonIdService._d_IdentityAccess
_0_PersonIdService.IdentityAccess = omniORB.newEmptyClass()
class IdentityAccess (_0_PersonIdService.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService._d_IdentityAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_PersonIdService.IdentityAccess = IdentityAccess
_0_PersonIdService._tc_IdentityAccess = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_IdentityAccess)
omniORB.registerType(IdentityAccess._NP_RepositoryId, _0_PersonIdService._d_IdentityAccess, _0_PersonIdService._tc_IdentityAccess)

# IdentityAccess operations and attributes
IdentityAccess._d_get_identity_object = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonId:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/Identity:1.0"], ), {_0_PersonIdService.InvalidId._NP_RepositoryId: _0_PersonIdService._d_InvalidId})
IdentityAccess._d_get_identity_objects = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/IdentitySeq:1.0"], ), {_0_PersonIdService.InvalidIds._NP_RepositoryId: _0_PersonIdService._d_InvalidIds})

# IdentityAccess object reference
class _objref_IdentityAccess (_0_PersonIdService._objref_IdentificationComponent):
    _NP_RepositoryId = IdentityAccess._NP_RepositoryId

    def __init__(self):
        _0_PersonIdService._objref_IdentificationComponent.__init__(self)

    def get_identity_object(self, *args):
        return _omnipy.invoke(self, "get_identity_object", _0_PersonIdService.IdentityAccess._d_get_identity_object, args)

    def get_identity_objects(self, *args):
        return _omnipy.invoke(self, "get_identity_objects", _0_PersonIdService.IdentityAccess._d_get_identity_objects, args)

    __methods__ = ["get_identity_object", "get_identity_objects"] + _0_PersonIdService._objref_IdentificationComponent.__methods__

omniORB.registerObjref(IdentityAccess._NP_RepositoryId, _objref_IdentityAccess)
_0_PersonIdService._objref_IdentityAccess = _objref_IdentityAccess
del IdentityAccess, _objref_IdentityAccess

# IdentityAccess skeleton
__name__ = "PersonIdService__POA"
class IdentityAccess (_0_PersonIdService__POA.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService.IdentityAccess._NP_RepositoryId


    _omni_op_d = {"get_identity_object": _0_PersonIdService.IdentityAccess._d_get_identity_object, "get_identity_objects": _0_PersonIdService.IdentityAccess._d_get_identity_objects}
    _omni_op_d.update(_0_PersonIdService__POA.IdentificationComponent._omni_op_d)

IdentityAccess._omni_skeleton = IdentityAccess
_0_PersonIdService__POA.IdentityAccess = IdentityAccess
del IdentityAccess
__name__ = "PersonIdService"

# interface IdMgr
_0_PersonIdService._d_IdMgr = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/IdMgr:1.0", "IdMgr")
omniORB.typeMapping["IDL:omg.org/PersonIdService/IdMgr:1.0"] = _0_PersonIdService._d_IdMgr
_0_PersonIdService.IdMgr = omniORB.newEmptyClass()
class IdMgr (_0_PersonIdService.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService._d_IdMgr[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_PersonIdService.IdMgr = IdMgr
_0_PersonIdService._tc_IdMgr = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_IdMgr)
omniORB.registerType(IdMgr._NP_RepositoryId, _0_PersonIdService._d_IdMgr, _0_PersonIdService._tc_IdMgr)

# IdMgr operations and attributes
IdMgr._d_register_new_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/ProfileSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], ), {_0_PersonIdService.ProfilesExist._NP_RepositoryId: _0_PersonIdService._d_ProfilesExist, _0_PersonIdService.DuplicateProfiles._NP_RepositoryId: _0_PersonIdService._d_DuplicateProfiles, _0_PersonIdService.MultipleTraits._NP_RepositoryId: _0_PersonIdService._d_MultipleTraits})
IdMgr._d_find_or_register_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/ProfileSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], ), {_0_PersonIdService.DuplicateProfiles._NP_RepositoryId: _0_PersonIdService._d_DuplicateProfiles, _0_PersonIdService.MultipleTraits._NP_RepositoryId: _0_PersonIdService._d_MultipleTraits})
IdMgr._d_register_these_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/TaggedProfileSeq:1.0"], ), (), {_0_PersonIdService.NotImplemented._NP_RepositoryId: _0_PersonIdService._d_NotImplemented, _0_PersonIdService.IdsExist._NP_RepositoryId: _0_PersonIdService._d_IdsExist, _0_PersonIdService.DuplicateIds._NP_RepositoryId: _0_PersonIdService._d_DuplicateIds, _0_PersonIdService.ProfilesExist._NP_RepositoryId: _0_PersonIdService._d_ProfilesExist, _0_PersonIdService.DuplicateProfiles._NP_RepositoryId: _0_PersonIdService._d_DuplicateProfiles, _0_PersonIdService.MultipleTraits._NP_RepositoryId: _0_PersonIdService._d_MultipleTraits})
IdMgr._d_create_temporary_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/ProfileSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], ), {_0_PersonIdService.MultipleTraits._NP_RepositoryId: _0_PersonIdService._d_MultipleTraits})
IdMgr._d_make_ids_permanent = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], ), {_0_PersonIdService.InvalidIds._NP_RepositoryId: _0_PersonIdService._d_InvalidIds, _0_PersonIdService.DuplicateIds._NP_RepositoryId: _0_PersonIdService._d_DuplicateIds, _0_PersonIdService.RequiredTraits._NP_RepositoryId: _0_PersonIdService._d_RequiredTraits})
IdMgr._d_merge_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/MergeStructSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/IdInfoSeq:1.0"], ), {_0_PersonIdService.InvalidIds._NP_RepositoryId: _0_PersonIdService._d_InvalidIds, _0_PersonIdService.DuplicateIds._NP_RepositoryId: _0_PersonIdService._d_DuplicateIds})
IdMgr._d_unmerge_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/IdInfoSeq:1.0"], ), {_0_PersonIdService.InvalidIds._NP_RepositoryId: _0_PersonIdService._d_InvalidIds, _0_PersonIdService.DuplicateIds._NP_RepositoryId: _0_PersonIdService._d_DuplicateIds})
IdMgr._d_deprecate_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/IdInfoSeq:1.0"], ), {_0_PersonIdService.InvalidIds._NP_RepositoryId: _0_PersonIdService._d_InvalidIds, _0_PersonIdService.DuplicateIds._NP_RepositoryId: _0_PersonIdService._d_DuplicateIds})

# IdMgr object reference
class _objref_IdMgr (_0_PersonIdService._objref_IdentificationComponent):
    _NP_RepositoryId = IdMgr._NP_RepositoryId

    def __init__(self):
        _0_PersonIdService._objref_IdentificationComponent.__init__(self)

    def register_new_ids(self, *args):
        return _omnipy.invoke(self, "register_new_ids", _0_PersonIdService.IdMgr._d_register_new_ids, args)

    def find_or_register_ids(self, *args):
        return _omnipy.invoke(self, "find_or_register_ids", _0_PersonIdService.IdMgr._d_find_or_register_ids, args)

    def register_these_ids(self, *args):
        return _omnipy.invoke(self, "register_these_ids", _0_PersonIdService.IdMgr._d_register_these_ids, args)

    def create_temporary_ids(self, *args):
        return _omnipy.invoke(self, "create_temporary_ids", _0_PersonIdService.IdMgr._d_create_temporary_ids, args)

    def make_ids_permanent(self, *args):
        return _omnipy.invoke(self, "make_ids_permanent", _0_PersonIdService.IdMgr._d_make_ids_permanent, args)

    def merge_ids(self, *args):
        return _omnipy.invoke(self, "merge_ids", _0_PersonIdService.IdMgr._d_merge_ids, args)

    def unmerge_ids(self, *args):
        return _omnipy.invoke(self, "unmerge_ids", _0_PersonIdService.IdMgr._d_unmerge_ids, args)

    def deprecate_ids(self, *args):
        return _omnipy.invoke(self, "deprecate_ids", _0_PersonIdService.IdMgr._d_deprecate_ids, args)

    __methods__ = ["register_new_ids", "find_or_register_ids", "register_these_ids", "create_temporary_ids", "make_ids_permanent", "merge_ids", "unmerge_ids", "deprecate_ids"] + _0_PersonIdService._objref_IdentificationComponent.__methods__

omniORB.registerObjref(IdMgr._NP_RepositoryId, _objref_IdMgr)
_0_PersonIdService._objref_IdMgr = _objref_IdMgr
del IdMgr, _objref_IdMgr

# IdMgr skeleton
__name__ = "PersonIdService__POA"
class IdMgr (_0_PersonIdService__POA.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService.IdMgr._NP_RepositoryId


    _omni_op_d = {"register_new_ids": _0_PersonIdService.IdMgr._d_register_new_ids, "find_or_register_ids": _0_PersonIdService.IdMgr._d_find_or_register_ids, "register_these_ids": _0_PersonIdService.IdMgr._d_register_these_ids, "create_temporary_ids": _0_PersonIdService.IdMgr._d_create_temporary_ids, "make_ids_permanent": _0_PersonIdService.IdMgr._d_make_ids_permanent, "merge_ids": _0_PersonIdService.IdMgr._d_merge_ids, "unmerge_ids": _0_PersonIdService.IdMgr._d_unmerge_ids, "deprecate_ids": _0_PersonIdService.IdMgr._d_deprecate_ids}
    _omni_op_d.update(_0_PersonIdService__POA.IdentificationComponent._omni_op_d)

IdMgr._omni_skeleton = IdMgr
_0_PersonIdService__POA.IdMgr = IdMgr
del IdMgr
__name__ = "PersonIdService"

# interface CorrelationMgr
_0_PersonIdService._d_CorrelationMgr = (omniORB.tcInternal.tv_objref, "IDL:omg.org/PersonIdService/CorrelationMgr:1.0", "CorrelationMgr")
omniORB.typeMapping["IDL:omg.org/PersonIdService/CorrelationMgr:1.0"] = _0_PersonIdService._d_CorrelationMgr
_0_PersonIdService.CorrelationMgr = omniORB.newEmptyClass()
class CorrelationMgr (_0_PersonIdService.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService._d_CorrelationMgr[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_PersonIdService.CorrelationMgr = CorrelationMgr
_0_PersonIdService._tc_CorrelationMgr = omniORB.tcInternal.createTypeCode(_0_PersonIdService._d_CorrelationMgr)
omniORB.registerType(CorrelationMgr._NP_RepositoryId, _0_PersonIdService._d_CorrelationMgr, _0_PersonIdService._tc_CorrelationMgr)

# CorrelationMgr operations and attributes
CorrelationMgr._d__get_source_domains = ((),(omniORB.typeMapping["IDL:omg.org/PersonIdService/DomainNameSeq:1.0"],),None)
CorrelationMgr._d_load_profiles = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedTaggedProfileSeq:1.0"], ), (), {_0_PersonIdService.UnknownTraits._NP_RepositoryId: _0_PersonIdService._d_UnknownTraits, _0_PersonIdService.WrongTraitFormat._NP_RepositoryId: _0_PersonIdService._d_WrongTraitFormat, _0_PersonIdService.DomainsNotKnown._NP_RepositoryId: _0_PersonIdService._d_DomainsNotKnown})
CorrelationMgr._d_get_corresponding_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedPersonId:1.0"], omniORB.typeMapping["IDL:omg.org/PersonIdService/DomainNameSeq:1.0"]), (omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedPersonIdSeq:1.0"], ), {_0_PersonIdService.DomainsNotKnown._NP_RepositoryId: _0_PersonIdService._d_DomainsNotKnown, _0_PersonIdService.IdsNotKnown._NP_RepositoryId: _0_PersonIdService._d_IdsNotKnown})
CorrelationMgr._d_find_or_register_ids = ((omniORB.typeMapping["IDL:omg.org/PersonIdService/QualifiedTaggedProfileSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/PersonIdService/PersonIdSeq:1.0"], ), {_0_PersonIdService.MultipleTraits._NP_RepositoryId: _0_PersonIdService._d_MultipleTraits, _0_PersonIdService.DomainsNotKnown._NP_RepositoryId: _0_PersonIdService._d_DomainsNotKnown, _0_PersonIdService.NotImplemented._NP_RepositoryId: _0_PersonIdService._d_NotImplemented})

# CorrelationMgr object reference
class _objref_CorrelationMgr (_0_PersonIdService._objref_IdentificationComponent):
    _NP_RepositoryId = CorrelationMgr._NP_RepositoryId

    def __init__(self):
        _0_PersonIdService._objref_IdentificationComponent.__init__(self)

    def _get_source_domains(self, *args):
        return _omnipy.invoke(self, "_get_source_domains", _0_PersonIdService.CorrelationMgr._d__get_source_domains, args)

    def load_profiles(self, *args):
        return _omnipy.invoke(self, "load_profiles", _0_PersonIdService.CorrelationMgr._d_load_profiles, args)

    def get_corresponding_ids(self, *args):
        return _omnipy.invoke(self, "get_corresponding_ids", _0_PersonIdService.CorrelationMgr._d_get_corresponding_ids, args)

    def find_or_register_ids(self, *args):
        return _omnipy.invoke(self, "find_or_register_ids", _0_PersonIdService.CorrelationMgr._d_find_or_register_ids, args)

    __methods__ = ["_get_source_domains", "load_profiles", "get_corresponding_ids", "find_or_register_ids"] + _0_PersonIdService._objref_IdentificationComponent.__methods__

omniORB.registerObjref(CorrelationMgr._NP_RepositoryId, _objref_CorrelationMgr)
_0_PersonIdService._objref_CorrelationMgr = _objref_CorrelationMgr
del CorrelationMgr, _objref_CorrelationMgr

# CorrelationMgr skeleton
__name__ = "PersonIdService__POA"
class CorrelationMgr (_0_PersonIdService__POA.IdentificationComponent):
    _NP_RepositoryId = _0_PersonIdService.CorrelationMgr._NP_RepositoryId


    _omni_op_d = {"_get_source_domains": _0_PersonIdService.CorrelationMgr._d__get_source_domains, "load_profiles": _0_PersonIdService.CorrelationMgr._d_load_profiles, "get_corresponding_ids": _0_PersonIdService.CorrelationMgr._d_get_corresponding_ids, "find_or_register_ids": _0_PersonIdService.CorrelationMgr._d_find_or_register_ids}
    _omni_op_d.update(_0_PersonIdService__POA.IdentificationComponent._omni_op_d)

CorrelationMgr._omni_skeleton = CorrelationMgr
_0_PersonIdService__POA.CorrelationMgr = CorrelationMgr
del CorrelationMgr
__name__ = "PersonIdService"

#
# End of module "PersonIdService"
#
__name__ = "PersonIdService_idl"

_exported_modules = ( "PersonIdService", )

# The end.
